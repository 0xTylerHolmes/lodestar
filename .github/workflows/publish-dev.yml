name: Publish dev release

# only one per github sha can be run
concurrency:
  group: cd-publish-dev

on:
  push:
    branches:
      - unstable

jobs:
  npm:
    name: Publish to NPM Registry
    runs-on: ubuntu-latest
    steps:
      # <common-build> - Uses YAML anchors in the future
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: "lts/gallium"
          registry-url: "https://registry.npmjs.org"
      - name: Node.js version
        id: node
        run: echo "::set-output name=v8CppApiVersion::$(node --print "process.versions.modules")"
      - name: Restore dependencies
        uses: actions/cache@master
        id: cache-deps
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-${{ steps.node.outputs.v8CppApiVersion }}-${{ hashFiles('**/yarn.lock', '**/package.json') }}
      - name: Install & build
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --ignore-optional && yarn build
      - name: Build
        run: yarn build
        if: steps.cache-deps.outputs.cache-hit == 'true'
      # </common-build>
      - name: Get version
        id: version
        run: |
          PACKAGE_VERSION=$(node -p "require('./packages/cli/package.json').version")
          NEXT_VERSION=$(npx --yes semver --increment minor $PACKAGE_VERSION)
          export VERSION=${NEXT_VERSION}-dev.${GITHUB_SHA:0:10}
          echo "::set-output name=version::$VERSION"
          echo PACKAGE_VERSION $PACKAGE_VERSION GITHUB_SHA $GITHUB_SHA VERSION $VERSION

      - name: Set dev version
        # Set all mono-repo packages to the same new version. Update their dependency versions too
        run: node scripts/release/set_version.mjs ${{ steps.version.outputs.version }} exact

      - name: Publish to npm registry
        run: node scripts/release/publish.mjs next
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    outputs:
      version: ${{ steps.version.outputs.version }}

  docker:
    name: Publish to Docker Hub
    runs-on: ubuntu-latest
    needs: npm
    steps:
      - uses: actions/checkout@v2
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        run: docker buildx build --push --tag chainsafe/lodestar:next --platform linux/amd64,linux/arm64 --build-arg VERSION=${{ needs.npm.outputs.version }} .
      - run: docker run chainsafe/lodestar:next --help
