{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Lodestar documentation! \u00b6 Lodestar is an open-source Ethereum Consensus client and Typescript ecosystem, maintained by ChainSafe Systems Getting started \u00b6 Follow the installation method for source install , NPM install , or Docker install to install Lodestar. Or use our comprehensive setup guide . Use Lodestar libraries in your next Ethereum Typescript project. Run a beacon node on mainnet or a public testnet . Utilize the whole stack by starting a local testnet . View the Lodestar CLI commands and options Prospective contributors can read the contributing section to understand how we develop and test on Lodestar. If you have questions submit an issue or join us on Discord ! Please note our security policy . Sign up to our mailing list for announcements and any critical information about Lodestar. Specifications \u00b6 Hardware specifications minimum / recommended, to run the Lodestar client. Minimum Recommended Processor Intel Core i5\u2013760 or AMD FX-8100 Intel Core i7\u20134770 or AMD FX-8310 Memory 4GB RAM 8GB RAM Storage 20GB available space SSD 100GB available space SSD Internet Broadband connection Broadband connection About these docs \u00b6 This documentation is open source, contribute at github.com/chainsafe/lodestar/docs . Need assistance? \u00b6 If you have questions about this documentation, feel free to talk to us on our ChainSafe Discord or open an issue and a member of the team or our community will be happy to assist you.","title":"Getting Started"},{"location":"#welcome-to-the-lodestar-documentation","text":"Lodestar is an open-source Ethereum Consensus client and Typescript ecosystem, maintained by ChainSafe Systems","title":"Welcome to the Lodestar documentation!"},{"location":"#getting-started","text":"Follow the installation method for source install , NPM install , or Docker install to install Lodestar. Or use our comprehensive setup guide . Use Lodestar libraries in your next Ethereum Typescript project. Run a beacon node on mainnet or a public testnet . Utilize the whole stack by starting a local testnet . View the Lodestar CLI commands and options Prospective contributors can read the contributing section to understand how we develop and test on Lodestar. If you have questions submit an issue or join us on Discord ! Please note our security policy . Sign up to our mailing list for announcements and any critical information about Lodestar.","title":"Getting started"},{"location":"#specifications","text":"Hardware specifications minimum / recommended, to run the Lodestar client. Minimum Recommended Processor Intel Core i5\u2013760 or AMD FX-8100 Intel Core i7\u20134770 or AMD FX-8310 Memory 4GB RAM 8GB RAM Storage 20GB available space SSD 100GB available space SSD Internet Broadband connection Broadband connection","title":"Specifications"},{"location":"#about-these-docs","text":"This documentation is open source, contribute at github.com/chainsafe/lodestar/docs .","title":"About these docs"},{"location":"#need-assistance","text":"If you have questions about this documentation, feel free to talk to us on our ChainSafe Discord or open an issue and a member of the team or our community will be happy to assist you.","title":"Need assistance?"},{"location":"contributing/","text":"Contribution Guidelines \u00b6 Thanks for your contribution to Lodestar. It's people like you that push the Ethereum ecosystem forward. Prerequisites \u00b6 :gear: NodeJS (LTS/Gallium) :toolbox: Yarn / Lerna Getting Started \u00b6 :gear: Run lerna bootstrap or yarn install to install dependencies. :gear: Run yarn build to build lib from source. :package: A lodestar binary will be bundled in ./packages/cli/bin . :computer: Run ./lodestar --help to get a list of available commands and argurments. Tests \u00b6 :test_tube: Run lerna run test:spec-min for minimal spec tests. :test_tube: Run lerna run test:spec-main for mainnet spec tests. :test_tube: Run lerna run test:unit for unit tests. :test_tube: Run lerna run test:e2e for end-to-end tests. :test_tube: Run lerna run test to run all tests. Debugging Spec Tests \u00b6 To fix errors always focus on passing all minimal tests first without running mainnet tests. Spec tests often compare full expected vs actual states in JSON format. To better understand the diff it's convenient to use mocha's option --inline-diffs . A single logical error can cause many spec tests to fail. To focus on a single test at a time you can use mocha's option --bail to stop at the first failed test To then run only that failed test you can run against a specific file as use mocha's option --grep to run only one case LODESTAR_PRESET=minimal ../../node_modules/.bin/mocha --config .mocharc.spec.yml test/spec/phase0/sanity.test.ts --inline-diffs --bail --grep \"attestation\" Docker \u00b6 The docker-compose file requires that a .env file be present in this directory. The default.env file provides a template and can be copied .env : cp default.env .env Beacon node only: \u00b6 docker-compose up -d Beacon node and validator: \u00b6 First, you must have keystores and their secrets available locally at ./keystores and your password.txt in ./secrets docker-compose -f docker-compose.yml -f docker-compose.validator.yml up -d Dockerized metrics + local beacon node: \u00b6 docker-compose -f docker/docker-compose.local.yml up -d First Time Contributor? \u00b6 Unsure where to begin contributing to Lodestar? Here are some ideas! :pencil2: See any typos? See any verbiage that should be changed or updated? Go for it! Github makes it easy to make contributions right from the browser. :mag_right: Look through our outstanding unassigned issues . (Hint: look for issues labeled meta-good-first-issue or meta-help-wanted !) :speech_balloon: Join our Discord chat ! Reporting A Bug? \u00b6 :spiral_notepad: Create a new issue! Select the type of issue that best fits, and please fill out as much of the information as you can. Contribution Process \u00b6 Make sure you're familiar with our contribution guidelines (this document) ! Create your own fork of this repository. Make your changes in your local fork. If you've made a code change, make sure to lint and test your changes ( yarn lint and yarn test:unit ). Make an open pull request when you're ready for it to be reviewed. We review PRs on a regular basis. See Pull request etiquette for more information. You may be asked to sign a Contributor License Agreement (CLA). We make it relatively painless with CLA-bot. Github Style Guide \u00b6 Branch Naming If you are contributing from this repo prefix the branch name with your Github username (i.e. myusername/short-description ) Pull Request Naming Pull request titles must be: Short and descriptive summary Should be capitalized and written in imperative present tense Not end with period For example: Add Edit on Github button to all the pages Pull Request Etiquette Pull requests should remain as drafts when they are not ready for review by maintainers. Open pull requests signal to the maintainers that it's ready for review. If your pull request is no longer applicable or validated to fix an issue, close your pull request. If your pull request is fixable and needs additional changes or commits within a short period of time, switch your pull request into a draft until it's ready. Otherwise, close your pull request and create a new issue instead. Lodestar Monorepo \u00b6 We're currently experimenting with hosting the majority of lodestar packages and support packages in this repository as a monorepo . We're using Lerna to manage the packages. See packages/ for a list of packages hosted in this repo. Style Guide \u00b6 Lodestar has migrated to using ES modules. Many module class constructors have the following signature: (options, dependencies) e.g.: public constructor(opts: IExampleOptions, {db, logger}: IExampleModules) Modules should be designed to \"do one thing and do it well!\" Consider the interface of a module -- events included, and make sure it is coherent Make sure your code is properly linted use an IDE that will show linter errors/warnings run yarn lint from the command line common rules: Functions and variables should be camelCase , classes should be PascalCase , constants should be UPPERCASE_WITH_UNDERSCORES . Use \" instead of ' All functions should have types declared for all parameters and return value You shouldn't be using TypeScript's any Private class properties should not be prefixed with a _ e.g.: private dirty; , not private _dirty; Make sure that your code is properly type checked: use an IDE that will show type errors run yarn check-types from the command line Make sure that the tests are still passing: run yarn test:unit from the command line Commenting: If your code does something that is not obvious or deviates from standards, leave a comment for other developers to explain your logic and reasoning. Use // commenting format unless it's a comment you want people to see in their IDE. Use /** **/ commenting format for documenting a function/variable. Code whitespace can be helpful for reading complex code, please add some. For unit tests, we forbid import stubbing when other approaches are feasible. Logging framework: When determining which log level to use for providing information to users, consider the level of importance and whether the alert is actionable (Warning, Error, Fatal). Trace: Describes events showing step by step execution which can be ignored during standard operation. Debug: Useful information for debugging purposes. Info: Purely informative logs which can be ignored during normal operation. Warning: Unexpected behaviour, but the application continues to function and key operations are unaffected. Error: One or more main functionalities are not working, preventing some functions from working properly. Fatal: One or more main functionalities are not working and preventing the application from fulfilling its duties. Contributing to Grafana dashboards \u00b6 To edit or extend an existing Grafana dashboard with minimal diff: Grab the .json dashboard file from current unstable Import file to Grafana via the web UI at /dashboard/import . Give it some temporal name relevant to your work (i.e. the branch name) Do edits on the Dashboard Once done make sure to leave the exact same visual aspect as before: same refresh interval, collapsed rows, etc. Click the \"share dashboard\" icon next to the title at the top left corner. Go to the \"Export\" tab, set \"Export for sharing externally\" to true and click \"Save to file\" Paste the contents of the downloaded file in the Github repo, commit and open your PR Label Guide \u00b6 Issues and pull requests are subject to the following labeling guidelines. PRs may have a status label to indicate deviation from the normal process such as status-blocked or status-do-not-merge Issues and PRs will be tagged with a scope and prio to indicate type and priority for triaging. All other labels allow for further evaluation and organization. Label descriptions can be found below. status.* Issues and Pull Request Status \u00b6 Status labels apply to issues and pull requests which deviate from normal processes. status-blocked : This is blocked by another issue that requires resolving first. status-do-not-merge : Merging this issue will break the build. Do not merge! scope.* Scope Indicator \u00b6 Scope is comparable to Module labels but less strict with the definition of components. It applies to both, issues and pull requests. scope-cpu-performance : Performance issue and ideas to improve performance. scope-documentation : All issues related to the Lodestar documentation. scope-interop : Issues that fix interop issues between Lodestar and CL, EL or tooling. scope-light-clients : All issues regarding light client development. scope-logging : Issue about logs: hygeine, format issues, improvements. scope-memory : Issues to reduce and improve memory usage. scope-metrics : All issues with regards to the exposed metrics. scope-networking : All issues related to networking, gossip, and libp2p. scope-profitability : Issues to directly improve validator performance and its profitability. scope-security : Issues that fix security issues: DOS, key leak, CVEs. scope-testing : Issues for adding test coverage, fixing existing tests or testing strategies scope-testnet-debugging : Issues uncovered through running a node on a public testnet. scope-ux : Issues for CLI UX or general consumer UX. prio.* Prioritization Indicator \u00b6 A simple indicator of issue prioritization. It mainly applies to issues. prio0-critical : Drop everything to resolve this immediately. prio1-high : Resolve issues as soon as possible. prio2-medium : Resolve this some time soon (tm). prio3-low : This is nice to have. spec.* Ethereum Consensus Spec Version Target \u00b6 Issues that target a specific version of the Ethereum consensus spec, shall be tagged accordingly. spec-phase0 : Issues targeting the initial Ethereum consensus spec version. spec-altair : Issues targeting the Altair Ethereum consensus spec version. spec-bellatrix : Issues targeting the Bellatrix Ethereum consensus spec version. meta.* Meta Labels to organize Miscelaneous Issues \u00b6 meta-breaking-change : Introduces breaking changes to DB, Validator, Beacon Node, or CLI interfaces. Handle with care! meta-dependencies : Pull requests that update a dependency. meta-discussion : Indicates a topic that requires input from various developers. meta-good-first-issue : Good first issues for newcomers and first-time contributors. meta-help-wanted : The author indicates that additional help is wanted. meta-pm : Issues relating to Project Management tasks. meta-stale : Label for stale issues applied by the stale bot. meta-technicaldebt : Issues introducing or resolving technical debts. Community \u00b6 Come chat with us on Discord and join our public weekly planning meetings!","title":"Contributing"},{"location":"contributing/#contribution-guidelines","text":"Thanks for your contribution to Lodestar. It's people like you that push the Ethereum ecosystem forward.","title":"Contribution Guidelines"},{"location":"contributing/#prerequisites","text":":gear: NodeJS (LTS/Gallium) :toolbox: Yarn / Lerna","title":"Prerequisites"},{"location":"contributing/#getting-started","text":":gear: Run lerna bootstrap or yarn install to install dependencies. :gear: Run yarn build to build lib from source. :package: A lodestar binary will be bundled in ./packages/cli/bin . :computer: Run ./lodestar --help to get a list of available commands and argurments.","title":"Getting Started"},{"location":"contributing/#tests","text":":test_tube: Run lerna run test:spec-min for minimal spec tests. :test_tube: Run lerna run test:spec-main for mainnet spec tests. :test_tube: Run lerna run test:unit for unit tests. :test_tube: Run lerna run test:e2e for end-to-end tests. :test_tube: Run lerna run test to run all tests.","title":"Tests"},{"location":"contributing/#debugging-spec-tests","text":"To fix errors always focus on passing all minimal tests first without running mainnet tests. Spec tests often compare full expected vs actual states in JSON format. To better understand the diff it's convenient to use mocha's option --inline-diffs . A single logical error can cause many spec tests to fail. To focus on a single test at a time you can use mocha's option --bail to stop at the first failed test To then run only that failed test you can run against a specific file as use mocha's option --grep to run only one case LODESTAR_PRESET=minimal ../../node_modules/.bin/mocha --config .mocharc.spec.yml test/spec/phase0/sanity.test.ts --inline-diffs --bail --grep \"attestation\"","title":"Debugging Spec Tests"},{"location":"contributing/#docker","text":"The docker-compose file requires that a .env file be present in this directory. The default.env file provides a template and can be copied .env : cp default.env .env","title":"Docker"},{"location":"contributing/#beacon-node-only","text":"docker-compose up -d","title":"Beacon node only:"},{"location":"contributing/#beacon-node-and-validator","text":"First, you must have keystores and their secrets available locally at ./keystores and your password.txt in ./secrets docker-compose -f docker-compose.yml -f docker-compose.validator.yml up -d","title":"Beacon node and validator:"},{"location":"contributing/#dockerized-metrics-local-beacon-node","text":"docker-compose -f docker/docker-compose.local.yml up -d","title":"Dockerized metrics + local beacon node:"},{"location":"contributing/#first-time-contributor","text":"Unsure where to begin contributing to Lodestar? Here are some ideas! :pencil2: See any typos? See any verbiage that should be changed or updated? Go for it! Github makes it easy to make contributions right from the browser. :mag_right: Look through our outstanding unassigned issues . (Hint: look for issues labeled meta-good-first-issue or meta-help-wanted !) :speech_balloon: Join our Discord chat !","title":"First Time Contributor?"},{"location":"contributing/#reporting-a-bug","text":":spiral_notepad: Create a new issue! Select the type of issue that best fits, and please fill out as much of the information as you can.","title":"Reporting A Bug?"},{"location":"contributing/#contribution-process","text":"Make sure you're familiar with our contribution guidelines (this document) ! Create your own fork of this repository. Make your changes in your local fork. If you've made a code change, make sure to lint and test your changes ( yarn lint and yarn test:unit ). Make an open pull request when you're ready for it to be reviewed. We review PRs on a regular basis. See Pull request etiquette for more information. You may be asked to sign a Contributor License Agreement (CLA). We make it relatively painless with CLA-bot.","title":"Contribution Process"},{"location":"contributing/#github-style-guide","text":"Branch Naming If you are contributing from this repo prefix the branch name with your Github username (i.e. myusername/short-description ) Pull Request Naming Pull request titles must be: Short and descriptive summary Should be capitalized and written in imperative present tense Not end with period For example: Add Edit on Github button to all the pages Pull Request Etiquette Pull requests should remain as drafts when they are not ready for review by maintainers. Open pull requests signal to the maintainers that it's ready for review. If your pull request is no longer applicable or validated to fix an issue, close your pull request. If your pull request is fixable and needs additional changes or commits within a short period of time, switch your pull request into a draft until it's ready. Otherwise, close your pull request and create a new issue instead.","title":"Github Style Guide"},{"location":"contributing/#lodestar-monorepo","text":"We're currently experimenting with hosting the majority of lodestar packages and support packages in this repository as a monorepo . We're using Lerna to manage the packages. See packages/ for a list of packages hosted in this repo.","title":"Lodestar Monorepo"},{"location":"contributing/#style-guide","text":"Lodestar has migrated to using ES modules. Many module class constructors have the following signature: (options, dependencies) e.g.: public constructor(opts: IExampleOptions, {db, logger}: IExampleModules) Modules should be designed to \"do one thing and do it well!\" Consider the interface of a module -- events included, and make sure it is coherent Make sure your code is properly linted use an IDE that will show linter errors/warnings run yarn lint from the command line common rules: Functions and variables should be camelCase , classes should be PascalCase , constants should be UPPERCASE_WITH_UNDERSCORES . Use \" instead of ' All functions should have types declared for all parameters and return value You shouldn't be using TypeScript's any Private class properties should not be prefixed with a _ e.g.: private dirty; , not private _dirty; Make sure that your code is properly type checked: use an IDE that will show type errors run yarn check-types from the command line Make sure that the tests are still passing: run yarn test:unit from the command line Commenting: If your code does something that is not obvious or deviates from standards, leave a comment for other developers to explain your logic and reasoning. Use // commenting format unless it's a comment you want people to see in their IDE. Use /** **/ commenting format for documenting a function/variable. Code whitespace can be helpful for reading complex code, please add some. For unit tests, we forbid import stubbing when other approaches are feasible. Logging framework: When determining which log level to use for providing information to users, consider the level of importance and whether the alert is actionable (Warning, Error, Fatal). Trace: Describes events showing step by step execution which can be ignored during standard operation. Debug: Useful information for debugging purposes. Info: Purely informative logs which can be ignored during normal operation. Warning: Unexpected behaviour, but the application continues to function and key operations are unaffected. Error: One or more main functionalities are not working, preventing some functions from working properly. Fatal: One or more main functionalities are not working and preventing the application from fulfilling its duties.","title":"Style Guide"},{"location":"contributing/#contributing-to-grafana-dashboards","text":"To edit or extend an existing Grafana dashboard with minimal diff: Grab the .json dashboard file from current unstable Import file to Grafana via the web UI at /dashboard/import . Give it some temporal name relevant to your work (i.e. the branch name) Do edits on the Dashboard Once done make sure to leave the exact same visual aspect as before: same refresh interval, collapsed rows, etc. Click the \"share dashboard\" icon next to the title at the top left corner. Go to the \"Export\" tab, set \"Export for sharing externally\" to true and click \"Save to file\" Paste the contents of the downloaded file in the Github repo, commit and open your PR","title":"Contributing to Grafana dashboards"},{"location":"contributing/#label-guide","text":"Issues and pull requests are subject to the following labeling guidelines. PRs may have a status label to indicate deviation from the normal process such as status-blocked or status-do-not-merge Issues and PRs will be tagged with a scope and prio to indicate type and priority for triaging. All other labels allow for further evaluation and organization. Label descriptions can be found below.","title":"Label Guide"},{"location":"contributing/#status-issues-and-pull-request-status","text":"Status labels apply to issues and pull requests which deviate from normal processes. status-blocked : This is blocked by another issue that requires resolving first. status-do-not-merge : Merging this issue will break the build. Do not merge!","title":"status.* Issues and Pull Request Status"},{"location":"contributing/#scope-scope-indicator","text":"Scope is comparable to Module labels but less strict with the definition of components. It applies to both, issues and pull requests. scope-cpu-performance : Performance issue and ideas to improve performance. scope-documentation : All issues related to the Lodestar documentation. scope-interop : Issues that fix interop issues between Lodestar and CL, EL or tooling. scope-light-clients : All issues regarding light client development. scope-logging : Issue about logs: hygeine, format issues, improvements. scope-memory : Issues to reduce and improve memory usage. scope-metrics : All issues with regards to the exposed metrics. scope-networking : All issues related to networking, gossip, and libp2p. scope-profitability : Issues to directly improve validator performance and its profitability. scope-security : Issues that fix security issues: DOS, key leak, CVEs. scope-testing : Issues for adding test coverage, fixing existing tests or testing strategies scope-testnet-debugging : Issues uncovered through running a node on a public testnet. scope-ux : Issues for CLI UX or general consumer UX.","title":"scope.* Scope Indicator"},{"location":"contributing/#prio-prioritization-indicator","text":"A simple indicator of issue prioritization. It mainly applies to issues. prio0-critical : Drop everything to resolve this immediately. prio1-high : Resolve issues as soon as possible. prio2-medium : Resolve this some time soon (tm). prio3-low : This is nice to have.","title":"prio.* Prioritization Indicator"},{"location":"contributing/#spec-ethereum-consensus-spec-version-target","text":"Issues that target a specific version of the Ethereum consensus spec, shall be tagged accordingly. spec-phase0 : Issues targeting the initial Ethereum consensus spec version. spec-altair : Issues targeting the Altair Ethereum consensus spec version. spec-bellatrix : Issues targeting the Bellatrix Ethereum consensus spec version.","title":"spec.* Ethereum Consensus Spec Version Target"},{"location":"contributing/#meta-meta-labels-to-organize-miscelaneous-issues","text":"meta-breaking-change : Introduces breaking changes to DB, Validator, Beacon Node, or CLI interfaces. Handle with care! meta-dependencies : Pull requests that update a dependency. meta-discussion : Indicates a topic that requires input from various developers. meta-good-first-issue : Good first issues for newcomers and first-time contributors. meta-help-wanted : The author indicates that additional help is wanted. meta-pm : Issues relating to Project Management tasks. meta-stale : Label for stale issues applied by the stale bot. meta-technicaldebt : Issues introducing or resolving technical debts.","title":"meta.* Meta Labels to organize Miscelaneous Issues"},{"location":"contributing/#community","text":"Come chat with us on Discord and join our public weekly planning meetings!","title":"Community"},{"location":"quickstart/","text":"Lodestar Quickstart \u00b6 In order to make things easy for users to onboard and try the ethereum Proof of Stake we have come up with Lodestar quickstart scripts! \u2705 Zero Configuration \u2705 All testnets supported along with mainnet \u2705 All mainstream Execution Clients integrated With just single command you can run lodestar with various execution engines, switch them up to see the Optimistic sync work its magic and eventually brings lodestar and the execution engine in sync Customizations \u00b6 You can adapt them to your production setups with ease! Here is a simple guide for you to follow along: \ud83d\udc49 https://hackmd.io/@philknows/rJegZyH9q Support \u00b6 We actively maintain and update the configurations of running lodestar with the top of the line execution engines for various PoS networks so you have the minimum possible figuring out to do. In case you are facing any issues with the quickstart, do reach us out on lodestar discord! Happy to help! \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f","title":"Quickstart"},{"location":"quickstart/#lodestar-quickstart","text":"In order to make things easy for users to onboard and try the ethereum Proof of Stake we have come up with Lodestar quickstart scripts! \u2705 Zero Configuration \u2705 All testnets supported along with mainnet \u2705 All mainstream Execution Clients integrated With just single command you can run lodestar with various execution engines, switch them up to see the Optimistic sync work its magic and eventually brings lodestar and the execution engine in sync","title":"Lodestar Quickstart"},{"location":"quickstart/#customizations","text":"You can adapt them to your production setups with ease! Here is a simple guide for you to follow along: \ud83d\udc49 https://hackmd.io/@philknows/rJegZyH9q","title":"Customizations"},{"location":"quickstart/#support","text":"We actively maintain and update the configurations of running lodestar with the top of the line execution engines for various PoS networks so you have the minimum possible figuring out to do. In case you are facing any issues with the quickstart, do reach us out on lodestar discord! Happy to help! \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f","title":"Support"},{"location":"design/depgraph/","text":"Lodestar monorepo dependency graph \u00b6 This is a diagram of the various lodestar-* packages in the Lodestar monorepo and how they fit together: Info note: this dependency graph only applies to dependencies as they are used in the src/ folders of each package, not in test/ graph TD lodestar[\"lodestar\"]:::nodemodule cli[\"lodestar-cli\"]:::nodemodule config[\"lodestar-config\"]:::nodemodule db[\"lodestar-db\"]:::nodemodule fork-choice[\"lodestar-fork-choice\"]:::nodemodule params[\"lodestar-params\"]:::nodemodule types[\"lodestar-types\"]:::nodemodule utils[\"lodestar-utils\"]:::nodemodule validator[\"lodestar-validator\"]:::nodemodule state-trans[\"lodestar-state-transition\"]:::nodemodule params-->config params-->types types-->lodestar types-->cli types-->config types-->validator types-->fork-choice config-->lodestar config-->cli config-->validator config-->fork-choice config-->state-trans config-->db utils-->lodestar utils-->db utils-->cli utils-->validator utils-->fork-choice utils-->state-trans state-trans-->lodestar state-trans-->validator state-trans-->fork-choice db-->lodestar db-->validator fork-choice-->lodestar lodestar-->cli validator-->cli click cli \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/cli\" click lodestar \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/beacon-node\" click validator \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/validator\" click db \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/db\" click params \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/params\" click state-trans \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/state-transition\" click fork-choice \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/fork-choice\" click types \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/types\" click utils \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/utils\" click config \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/config\" classDef nodemodule fill:grey,stroke-width:2px,stroke:black,color:white; linkStyle default stroke:grey, fill:none,stroke-width:1.5px; For a list of all the packages in the monorepo and a description for each, click here . Let's talk about how each package fits together in finer detail, from top to bottom, following the chart. @lodestar/params \u00b6 @lodestar/params contains the parameters for configuring an Ethereum Consensus network. For example, the mainnet params @lodestar/types \u00b6 @lodestar/types contains Eth Consensus ssz types and data structures. @lodestar/config \u00b6 @lodestar/config combines lodestar-params and lodestar-types together to be used as a single config object across the other Lodestar packages. @lodestar/utils \u00b6 @lodestar/utils contains various utilities that are common among the various Lodestar monorepo packages. @lodestar/state-transition \u00b6 @lodestar/state-transition contains the Lodestar implementation of the beacon state transition function , which is used by @lodestar/beacon-node to perform the actual beacon state transition. This package also contains various functions used to calculate info about the beacon chain (such as computeEpochAtSlot ) which are used by @lodestar/fork-choice and @lodestar/validator @lodestar/db \u00b6 @lodestar/db is where all persistent data about the beacon node is stored. Any package that needs to read or write persistent beacon node data depends on lodestar-db . @lodestar/fork-choice \u00b6 @lodestar/fork-choice holds the methods for reading/writing the fork choice DAG. The @lodestar/beacon-node package is the sole consumer of this package because the beacon node itself is what controls when the fork choice DAG is updated. For a good explainer on how the fork choice itself works, see the annotated fork choice spec . This is an annotated version of the Eth Consensus fork choice spec which lodestar-fork-choice is based on. @lodestar/validator \u00b6 @lodestar/validator contains the validator client. The sole consumer of this package is @chainsafe/lodestar , which provides CLI access to run and configure the validator client. However, the validator client communicates to a REST API that is contained in @lodestar/beacon-node (specifically in the api module) to perform the validator duties. @lodestar/beacon-node \u00b6 @lodestar/beacon-node contains the actual beacon node process itself, which is the aggregate of all the above packages and the \"brain\" of the Lodestar beacon chain implementation. All of the node modules live in this package as well. @chainsafe/lodestar \u00b6 @chainsafe/lodestar combines everything together for CLI usage and configuration of the beacon node and validator.","title":"Lodestar package structure"},{"location":"design/depgraph/#lodestar-monorepo-dependency-graph","text":"This is a diagram of the various lodestar-* packages in the Lodestar monorepo and how they fit together: Info note: this dependency graph only applies to dependencies as they are used in the src/ folders of each package, not in test/ graph TD lodestar[\"lodestar\"]:::nodemodule cli[\"lodestar-cli\"]:::nodemodule config[\"lodestar-config\"]:::nodemodule db[\"lodestar-db\"]:::nodemodule fork-choice[\"lodestar-fork-choice\"]:::nodemodule params[\"lodestar-params\"]:::nodemodule types[\"lodestar-types\"]:::nodemodule utils[\"lodestar-utils\"]:::nodemodule validator[\"lodestar-validator\"]:::nodemodule state-trans[\"lodestar-state-transition\"]:::nodemodule params-->config params-->types types-->lodestar types-->cli types-->config types-->validator types-->fork-choice config-->lodestar config-->cli config-->validator config-->fork-choice config-->state-trans config-->db utils-->lodestar utils-->db utils-->cli utils-->validator utils-->fork-choice utils-->state-trans state-trans-->lodestar state-trans-->validator state-trans-->fork-choice db-->lodestar db-->validator fork-choice-->lodestar lodestar-->cli validator-->cli click cli \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/cli\" click lodestar \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/beacon-node\" click validator \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/validator\" click db \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/db\" click params \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/params\" click state-trans \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/state-transition\" click fork-choice \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/fork-choice\" click types \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/types\" click utils \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/utils\" click config \"https://github.com/ChainSafe/lodestar/tree/unstable/packages/config\" classDef nodemodule fill:grey,stroke-width:2px,stroke:black,color:white; linkStyle default stroke:grey, fill:none,stroke-width:1.5px; For a list of all the packages in the monorepo and a description for each, click here . Let's talk about how each package fits together in finer detail, from top to bottom, following the chart.","title":"Lodestar monorepo dependency graph"},{"location":"design/depgraph/#lodestarparams","text":"@lodestar/params contains the parameters for configuring an Ethereum Consensus network. For example, the mainnet params","title":"@lodestar/params"},{"location":"design/depgraph/#lodestartypes","text":"@lodestar/types contains Eth Consensus ssz types and data structures.","title":"@lodestar/types"},{"location":"design/depgraph/#lodestarconfig","text":"@lodestar/config combines lodestar-params and lodestar-types together to be used as a single config object across the other Lodestar packages.","title":"@lodestar/config"},{"location":"design/depgraph/#lodestarutils","text":"@lodestar/utils contains various utilities that are common among the various Lodestar monorepo packages.","title":"@lodestar/utils"},{"location":"design/depgraph/#lodestarstate-transition","text":"@lodestar/state-transition contains the Lodestar implementation of the beacon state transition function , which is used by @lodestar/beacon-node to perform the actual beacon state transition. This package also contains various functions used to calculate info about the beacon chain (such as computeEpochAtSlot ) which are used by @lodestar/fork-choice and @lodestar/validator","title":"@lodestar/state-transition"},{"location":"design/depgraph/#lodestardb","text":"@lodestar/db is where all persistent data about the beacon node is stored. Any package that needs to read or write persistent beacon node data depends on lodestar-db .","title":"@lodestar/db"},{"location":"design/depgraph/#lodestarfork-choice","text":"@lodestar/fork-choice holds the methods for reading/writing the fork choice DAG. The @lodestar/beacon-node package is the sole consumer of this package because the beacon node itself is what controls when the fork choice DAG is updated. For a good explainer on how the fork choice itself works, see the annotated fork choice spec . This is an annotated version of the Eth Consensus fork choice spec which lodestar-fork-choice is based on.","title":"@lodestar/fork-choice"},{"location":"design/depgraph/#lodestarvalidator","text":"@lodestar/validator contains the validator client. The sole consumer of this package is @chainsafe/lodestar , which provides CLI access to run and configure the validator client. However, the validator client communicates to a REST API that is contained in @lodestar/beacon-node (specifically in the api module) to perform the validator duties.","title":"@lodestar/validator"},{"location":"design/depgraph/#lodestarbeacon-node","text":"@lodestar/beacon-node contains the actual beacon node process itself, which is the aggregate of all the above packages and the \"brain\" of the Lodestar beacon chain implementation. All of the node modules live in this package as well.","title":"@lodestar/beacon-node"},{"location":"design/depgraph/#chainsafelodestar","text":"@chainsafe/lodestar combines everything together for CLI usage and configuration of the beacon node and validator.","title":"@chainsafe/lodestar"},{"location":"install/docker/","text":"Install with Docker \u00b6 The chainsafe/lodestar Docker Hub repository is mantained actively. It contains the lodestar CLI preinstalled. Info The Docker Hub image tagged as chainsafe/lodestar:next is run on CI every dev commit on our unstable branch. For stable releases, the image is tagged as chainsafe/lodestar:latest . Ensure you have Docker installed by issuing the command: docker -v It should return a non error message such as Docker version xxxx, build xxxx . Pull, run the image and Lodestar should now be ready to use docker pull chainsafe/lodestar docker run chainsafe/lodestar --help Info Docker is the recommended setup for Lodestar. Use our comprehensive setup guide with Docker for detailed instructions.","title":"Install with Docker"},{"location":"install/docker/#install-with-docker","text":"The chainsafe/lodestar Docker Hub repository is mantained actively. It contains the lodestar CLI preinstalled. Info The Docker Hub image tagged as chainsafe/lodestar:next is run on CI every dev commit on our unstable branch. For stable releases, the image is tagged as chainsafe/lodestar:latest . Ensure you have Docker installed by issuing the command: docker -v It should return a non error message such as Docker version xxxx, build xxxx . Pull, run the image and Lodestar should now be ready to use docker pull chainsafe/lodestar docker run chainsafe/lodestar --help Info Docker is the recommended setup for Lodestar. Use our comprehensive setup guide with Docker for detailed instructions.","title":"Install with Docker"},{"location":"install/npm/","text":"Install from NPM [not recommended] \u00b6 Danger For mainnet (production) usage, we only recommend installing with docker due to NPM supply chain attacks . Until a safer installation method has been found , do not use this install method except for experimental purposes only.","title":"Install from NPM"},{"location":"install/npm/#install-from-npm-not-recommended","text":"Danger For mainnet (production) usage, we only recommend installing with docker due to NPM supply chain attacks . Until a safer installation method has been found , do not use this install method except for experimental purposes only.","title":"Install from NPM [not recommended]"},{"location":"install/source/","text":"Install from source \u00b6 Make sure to have Yarn installed . It is also recommended to install NVM (Node Version Manager) and use v16 of NodeJS . Info NodeJS versions < 16.x are not supported by Lodestar. We currently recommend running NodeJS 16.x. Clone the repo locally. git clone https://github.com/chainsafe/lodestar.git Install across all packages. Lodestar follows a monorepo structure, so all commands below must be run in the project root. Use the --ignore-optional flag to prevent downloading the Ethereum Consensus spec tests. yarn install --ignore-optional Build across all packages. yarn run build Or if you are using Lerna : lerna bootstrap Lodestar should now be ready for use. ./lodestar --help","title":"Install from source"},{"location":"install/source/#install-from-source","text":"Make sure to have Yarn installed . It is also recommended to install NVM (Node Version Manager) and use v16 of NodeJS . Info NodeJS versions < 16.x are not supported by Lodestar. We currently recommend running NodeJS 16.x. Clone the repo locally. git clone https://github.com/chainsafe/lodestar.git Install across all packages. Lodestar follows a monorepo structure, so all commands below must be run in the project root. Use the --ignore-optional flag to prevent downloading the Ethereum Consensus spec tests. yarn install --ignore-optional Build across all packages. yarn run build Or if you are using Lerna : lerna bootstrap Lodestar should now be ready for use. ./lodestar --help","title":"Install from source"},{"location":"libraries/","text":"Lodestar libraries \u00b6 The Lodestar project is divided into Typescript packages that can be used independently of the CLI. These packages span the breadth of the Ethereum Consensus layer, and are perfect for Typescript developers looking to build around Ethereum. Monorepo libraries \u00b6 Several useful Ethereum consensus libraries are developed as part of the Lodestar monorepo and may be useful when used individually. params - Ethereum consensus constants and fork names types - Ethereum consensus datatypes, Typescript interfaces and SSZ type objects config - Ethereum consensus run-time network configuration api - Ethereum consensus REST API client flare - Beacon chain multi-purpose and debugging tool Other libraries \u00b6 BLS Utilities \u00b6 bls - Eth Consensus BLS sign / verify / aggregate bls-keystore - store / retrieve a BLS secret key from an EIP-2335 JSON keystore bls-keygen - utility functions to generate BLS secret keys, following EIP-2333 and EIP-2334 bls-hd-key - low level EIP-2333 and EIP-2334 functionality Hashing \u00b6 ssz - Simple Serialize (SSZ) persistent-merkle-tree - binary merkle tree implemented as a persistent data structure as-sha256 - Small AssemblyScript implementation of SHA256 Networking \u00b6 discv5 - Discv5 protocol js-libp2p-gossipsub - Gossipsub protocol for js-libp2p js-libp2p-noise - Noise handshake for js-libp2p","title":"Libraries"},{"location":"libraries/#lodestar-libraries","text":"The Lodestar project is divided into Typescript packages that can be used independently of the CLI. These packages span the breadth of the Ethereum Consensus layer, and are perfect for Typescript developers looking to build around Ethereum.","title":"Lodestar libraries"},{"location":"libraries/#monorepo-libraries","text":"Several useful Ethereum consensus libraries are developed as part of the Lodestar monorepo and may be useful when used individually. params - Ethereum consensus constants and fork names types - Ethereum consensus datatypes, Typescript interfaces and SSZ type objects config - Ethereum consensus run-time network configuration api - Ethereum consensus REST API client flare - Beacon chain multi-purpose and debugging tool","title":"Monorepo libraries"},{"location":"libraries/#other-libraries","text":"","title":"Other libraries"},{"location":"libraries/#bls-utilities","text":"bls - Eth Consensus BLS sign / verify / aggregate bls-keystore - store / retrieve a BLS secret key from an EIP-2335 JSON keystore bls-keygen - utility functions to generate BLS secret keys, following EIP-2333 and EIP-2334 bls-hd-key - low level EIP-2333 and EIP-2334 functionality","title":"BLS Utilities"},{"location":"libraries/#hashing","text":"ssz - Simple Serialize (SSZ) persistent-merkle-tree - binary merkle tree implemented as a persistent data structure as-sha256 - Small AssemblyScript implementation of SHA256","title":"Hashing"},{"location":"libraries/#networking","text":"discv5 - Discv5 protocol js-libp2p-gossipsub - Gossipsub protocol for js-libp2p js-libp2p-noise - Noise handshake for js-libp2p","title":"Networking"},{"location":"reference/cli/","text":"Command Line Reference \u00b6 This reference describes the syntax of the Lodestar CLI commands and their options. Global Options \u00b6 Option Type Description Default --dataDir string Lodestar root data directory --network string Name of the Ethereum Consensus chain network to join mainnet --paramsFile string Network configuration file --terminal-total-difficulty-override string Terminal PoW block TTD override --terminal-block-hash-override string Terminal PoW block hash override --terminal-block-hash-epoch-override string Terminal PoW block hash override activation epoch beacon \u00b6 Run a beacon chain node Examples Run a beacon chain node and connect to the goerli testnet beacon --network goerli Options Option Type Description Default --checkpointSyncUrl string Server url hosting Beacon Node APIs to fetch weak subjectivity state. Fetch latest finalized by default, else set --wssCheckpoint --checkpointState string Set a checkpoint state to start syncing from --wssCheckpoint string Start beacon node off a state at the provided weak subjectivity checkpoint, to be supplied in : format. For example, 0x1234:100 will sync and start off from the weakSubjectivity state at checkpoint of epoch 100 with block root 0x1234. --logLevel string Logging verbosity level for emittings logs to terminal info --logFile string Path to output all logs to a persistent log file, use 'none' to disable --logFileLevel string Logging verbosity level for emittings logs to file debug --logFileDailyRotate number Daily rotate log files, set to an integer to limit the file count, set to 0(zero) to disable rotation 5 --rest boolean Enable/disable HTTP API true --rest.namespace array Pick namespaces to expose for HTTP API. Set to '*' to enable all namespaces [\"beacon\",\"config\",\"events\",\"node\",\"validator\"] --rest.cors string Configures the Access-Control-Allow-Origin CORS header for HTTP API * --rest.address string Set host for HTTP API 127.0.0.1 --rest.port number Set port for HTTP API 9596 --suggestedFeeRecipient string Specify fee recipient default for collecting the EL block fees and rewards (a hex string representing 20 bytes address: ^0x[a-fA-F0-9]{40}$) in case validator fails to update for a validator index before calling produceBlock. 0x0000000000000000000000000000000000000000 --eth1 boolean Whether to follow the eth1 chain true --eth1.providerUrls array Urls to Eth1 node with enabled rpc. If not explicity provided and execution endpoint provided via execution.urls, it will use execution.urls. Otherwise will try connecting on the specified default(s) http://localhost:8545 --execution.urls array Urls to execution client engine API --execution.timeout number Timeout in miliseconds for execution engine API HTTP client --execution.retryAttempts number Number of retry attempts when calling execution engine API 1 --execution.retryDelay number Delay time in milliseconds between retries when retrying calls to the execution engine API 0 --jwt-secret string File path to a shared hex-encoded jwt secret which will be used to generate and bundle HS256 encoded jwt tokens for authentication with the EL client's rpc server hosting engine apis. Secret to be exactly same as the one used by the corresponding EL client. --builder boolean Enable builder interface false --builder.urls array Urls hosting the builder API --builder.timeout number Timeout in miliseconds for builder API HTTP client --metrics boolean Enable the Prometheus metrics HTTP server false --metrics.port number Listen TCP port for the Prometheus metrics HTTP server 8008 --metrics.address string Listen address for the Prometheus metrics HTTP server undefined --discv5 boolean Enable discv5 true --listenAddress string The address to listen for p2p UDP and TCP connections 0.0.0.0 --port number The TCP/UDP port to listen on. The UDP port can be modified by the --discovery-port flag. 9000 --discoveryPort number The UDP port that discovery will listen on. Defaults to port port --bootnodes array Bootnodes for discv5 discovery [] --targetPeers number The target connected peers. Above this number peers will be disconnected 50 --subscribeAllSubnets boolean Subscribe to all subnets regardless of validator count false --terminal-total-difficulty-override string Terminal PoW block TTD override --terminal-block-hash-override string Terminal PoW block hash override --terminal-block-hash-epoch-override string Terminal PoW block hash override activation epoch --enr.ip string Override ENR IP entry --enr.tcp number Override ENR TCP entry --enr.udp number Override ENR UDP entry --enr.ip6 string Override ENR IPv6 entry --enr.tcp6 number Override ENR (IPv6-specific) TCP entry --enr.udp6 number Override ENR (IPv6-specific) UDP entry validator \u00b6 Run one or multiple validator clients Examples Run one validator client with all the keystores available in the directory .goerli/keystores validator --network goerli Options The options below apply to all subcommands. Option Type Description Default --logLevel string Logging verbosity level for emittings logs to terminal info --logFile string Path to output all logs to a persistent log file, use 'none' to disable --logFileLevel string Logging verbosity level for emittings logs to file debug --logFileDailyRotate number Daily rotate log files, set to an integer to limit the file count, set to 0(zero) to disable rotation 5 --keymanager boolean Enable keymanager API server --keymanager.authEnabled boolean Enable token bearer authentication for keymanager API server true --keymanager.port number Set port for keymanager API 5062 --keymanager.address string Set host for keymanager API 127.0.0.1 --keymanager.cors string Configures the Access-Control-Allow-Origin CORS header for keymanager API * --beaconNodes array Addresses to connect to BeaconNode http://127.0.0.1:9596 --force boolean Open validators even if there's a lockfile. Use with caution --graffiti string Specify your custom graffiti to be included in blocks (plain UTF8 text, 32 characters max) --proposerSettingsFile string A yaml file to specify detailed default and per validator pubkey customized proposer configs. PS: This feature and its format is in alpha and subject to change --suggestedFeeRecipient string Specify fee recipient default for collecting the EL block fees and rewards (a hex string representing 20 bytes address: ^0x[a-fA-F0-9]{40}$). It would be possible (WIP) to override this per validator key using config or keymanager API. Only used post merge. 0x0000000000000000000000000000000000000000 --strictFeeRecipientCheck boolean Enable strict checking of the validator's feeRecipient with the one returned by engine --defaultGasLimit number Suggested gasLimit to the engine/builder for building execution payloads. Only used post merge. 30000000 --builder boolean Enable execution payload production via a builder for better rewards --importKeystores array Path(s) to a directory or single filepath to validator keystores, i.e. Launchpad validators ./keystores/*.json --importKeystoresPassword string Path to a file with password to decrypt all keystores from importKeystores option ./password.txt --doppelgangerProtectionEnabled boolean Enables Doppelganger protection --externalSigner.url string URL to connect to an external signing server --externalSigner.pubkeys array List of validator public keys used by an external signer. May also provide a single string a comma separated public keys --externalSigner.fetch boolean Fetch then list of pubkeys to validate from an external signer --metrics boolean Enable the Prometheus metrics HTTP server false --metrics.port number Listen TCP port for the Prometheus metrics HTTP server 5064 --metrics.address string Listen address for the Prometheus metrics HTTP server 127.0.0.1 validator slashing-protection \u00b6 Import or export slashing protection data to or from another client. Options The options below apply to all subcommands. Option Type Description Default --beaconNodes array Addresses to connect to BeaconNode http://127.0.0.1:9596 --force boolean If genesisValidatorsRoot can't be fetched from the Beacon node, use a zero hash validator slashing-protection import \u00b6 Import an interchange file. Examples Import an interchange file to the slashing protection DB validator slashing-protection import --network goerli --file interchange.json Options Option Type Description Default --file string The slashing protection interchange file to import (.json). validator slashing-protection export \u00b6 Export an interchange file. Examples Export an interchange JSON file for all validators in the slashing protection DB validator slashing-protection export --network goerli --file interchange.json Options Option Type Description Default --file string The slashing protection interchange file to export to (.json). validator import \u00b6 Imports one or more EIP-2335 keystores into a Lodestar validator client directory, requesting passwords interactively. The directory flag provides a convenient method for importing a directory of keys generated by the eth2-deposit-cli Ethereum Foundation utility. Examples Import validator keystores generated with the Ethereum Foundation Staking Launchpad validator import --network goerli --keystores $HOME/eth2.0-deposit-cli/validator_keys Options Option Type Description Default --logLevel string Logging verbosity level for emittings logs to terminal info --logFile string Path to output all logs to a persistent log file, use 'none' to disable --logFileLevel string Logging verbosity level for emittings logs to file debug --logFileDailyRotate number Daily rotate log files, set to an integer to limit the file count, set to 0(zero) to disable rotation 5 --keymanager boolean Enable keymanager API server --keymanager.authEnabled boolean Enable token bearer authentication for keymanager API server true --keymanager.port number Set port for keymanager API 5062 --keymanager.address string Set host for keymanager API 127.0.0.1 --keymanager.cors string Configures the Access-Control-Allow-Origin CORS header for keymanager API * --beaconNodes array Addresses to connect to BeaconNode http://127.0.0.1:9596 --force boolean Open validators even if there's a lockfile. Use with caution --graffiti string Specify your custom graffiti to be included in blocks (plain UTF8 text, 32 characters max) --proposerSettingsFile string A yaml file to specify detailed default and per validator pubkey customized proposer configs. PS: This feature and its format is in alpha and subject to change --suggestedFeeRecipient string Specify fee recipient default for collecting the EL block fees and rewards (a hex string representing 20 bytes address: ^0x[a-fA-F0-9]{40}$). It would be possible (WIP) to override this per validator key using config or keymanager API. Only used post merge. 0x0000000000000000000000000000000000000000 --strictFeeRecipientCheck boolean Enable strict checking of the validator's feeRecipient with the one returned by engine --defaultGasLimit number Suggested gasLimit to the engine/builder for building execution payloads. Only used post merge. 30000000 --builder boolean Enable execution payload production via a builder for better rewards --importKeystores array Path(s) to a directory or single filepath to validator keystores, i.e. Launchpad validators ./keystores/*.json --importKeystoresPassword string Path to a file with password to decrypt all keystores from importKeystores option ./password.txt --doppelgangerProtectionEnabled boolean Enables Doppelganger protection --externalSigner.url string URL to connect to an external signing server --externalSigner.pubkeys array List of validator public keys used by an external signer. May also provide a single string a comma separated public keys --externalSigner.fetch boolean Fetch then list of pubkeys to validate from an external signer --metrics boolean Enable the Prometheus metrics HTTP server false --metrics.port number Listen TCP port for the Prometheus metrics HTTP server 5064 --metrics.address string Listen address for the Prometheus metrics HTTP server 127.0.0.1 validator list \u00b6 Lists the public keys of all validators Examples List all validator pubkeys previously imported account validator list validator voluntary-exit \u00b6 Performs a voluntary exit for a given validator (as identified via publicKey . If no publicKey is provided, a prompt will ask the user which validator they would like to choose for the voluntary exit. Examples Perform a voluntary exit for the validator who has a public key 0xF00 account validator voluntary-exit --publicKey 0xF00 Options Option Type Description Default --exitEpoch number The epoch upon which to submit the voluntary exit. If no value is provided, then we default to the currentEpoch. --pubkeys array Pubkeys to exit, must be available as local signers --yes boolean Skip confirmation prompt lightclient \u00b6 Run lightclient Examples Run lightclient with goerli network lightclient --network goerli Options Option Type Description Default --logLevel string Logging verbosity level for emittings logs to terminal info --logFile string Path to output all logs to a persistent log file, use 'none' to disable --logFileLevel string Logging verbosity level for emittings logs to file debug --logFileDailyRotate number Daily rotate log files, set to an integer to limit the file count, set to 0(zero) to disable rotation 5 --beaconApiUrl string Url to a beacon node that support lightclient API --checkpointRoot string Checkpoint root hex string to sync the lightclient from, start with 0x dev \u00b6 Quickly bootstrap a beacon node and multiple validators. Use for development and testing Examples Start a single beacon node with 8 interop validators dev --genesisValidators 8 --reset Options Cmd dev has all the options from the beacon cmd . Option Type Description Default --keymanager boolean Enable keymanager API server --keymanager.authEnabled boolean Enable token bearer authentication for keymanager API server true --keymanager.port number Set port for keymanager API 5062 --keymanager.address string Set host for keymanager API 127.0.0.1 --keymanager.cors string Configures the Access-Control-Allow-Origin CORS header for keymanager API * --beaconNodes array Addresses to connect to BeaconNode http://127.0.0.1:9596 --force boolean Open validators even if there's a lockfile. Use with caution --graffiti string Specify your custom graffiti to be included in blocks (plain UTF8 text, 32 characters max) --proposerSettingsFile string A yaml file to specify detailed default and per validator pubkey customized proposer configs. PS: This feature and its format is in alpha and subject to change --strictFeeRecipientCheck boolean Enable strict checking of the validator's feeRecipient with the one returned by engine --defaultGasLimit number Suggested gasLimit to the engine/builder for building execution payloads. Only used post merge. 30000000 --importKeystores array Path(s) to a directory or single filepath to validator keystores, i.e. Launchpad validators ./keystores/*.json --importKeystoresPassword string Path to a file with password to decrypt all keystores from importKeystores option ./password.txt --doppelgangerProtectionEnabled boolean Enables Doppelganger protection --externalSigner.url string URL to connect to an external signing server --externalSigner.pubkeys array List of validator public keys used by an external signer. May also provide a single string a comma separated public keys --externalSigner.fetch boolean Fetch then list of pubkeys to validate from an external signer --network string Name of the Ethereum Consensus chain network to join mainnet --genesisEth1Hash string If present it will create genesis with this eth1 hash. --genesisValidators number If present it will create genesis with interop validators and start chain. 8 --startValidators string Start interop validators in inclusive range with notation '0..7' --genesisTime number genesis_time to initialize interop genesis state now --reset boolean To delete chain and validator directories","title":"Command line"},{"location":"reference/cli/#command-line-reference","text":"This reference describes the syntax of the Lodestar CLI commands and their options.","title":"Command Line Reference"},{"location":"reference/cli/#global-options","text":"Option Type Description Default --dataDir string Lodestar root data directory --network string Name of the Ethereum Consensus chain network to join mainnet --paramsFile string Network configuration file --terminal-total-difficulty-override string Terminal PoW block TTD override --terminal-block-hash-override string Terminal PoW block hash override --terminal-block-hash-epoch-override string Terminal PoW block hash override activation epoch","title":"Global Options"},{"location":"reference/cli/#beacon","text":"Run a beacon chain node Examples Run a beacon chain node and connect to the goerli testnet beacon --network goerli Options Option Type Description Default --checkpointSyncUrl string Server url hosting Beacon Node APIs to fetch weak subjectivity state. Fetch latest finalized by default, else set --wssCheckpoint --checkpointState string Set a checkpoint state to start syncing from --wssCheckpoint string Start beacon node off a state at the provided weak subjectivity checkpoint, to be supplied in : format. For example, 0x1234:100 will sync and start off from the weakSubjectivity state at checkpoint of epoch 100 with block root 0x1234. --logLevel string Logging verbosity level for emittings logs to terminal info --logFile string Path to output all logs to a persistent log file, use 'none' to disable --logFileLevel string Logging verbosity level for emittings logs to file debug --logFileDailyRotate number Daily rotate log files, set to an integer to limit the file count, set to 0(zero) to disable rotation 5 --rest boolean Enable/disable HTTP API true --rest.namespace array Pick namespaces to expose for HTTP API. Set to '*' to enable all namespaces [\"beacon\",\"config\",\"events\",\"node\",\"validator\"] --rest.cors string Configures the Access-Control-Allow-Origin CORS header for HTTP API * --rest.address string Set host for HTTP API 127.0.0.1 --rest.port number Set port for HTTP API 9596 --suggestedFeeRecipient string Specify fee recipient default for collecting the EL block fees and rewards (a hex string representing 20 bytes address: ^0x[a-fA-F0-9]{40}$) in case validator fails to update for a validator index before calling produceBlock. 0x0000000000000000000000000000000000000000 --eth1 boolean Whether to follow the eth1 chain true --eth1.providerUrls array Urls to Eth1 node with enabled rpc. If not explicity provided and execution endpoint provided via execution.urls, it will use execution.urls. Otherwise will try connecting on the specified default(s) http://localhost:8545 --execution.urls array Urls to execution client engine API --execution.timeout number Timeout in miliseconds for execution engine API HTTP client --execution.retryAttempts number Number of retry attempts when calling execution engine API 1 --execution.retryDelay number Delay time in milliseconds between retries when retrying calls to the execution engine API 0 --jwt-secret string File path to a shared hex-encoded jwt secret which will be used to generate and bundle HS256 encoded jwt tokens for authentication with the EL client's rpc server hosting engine apis. Secret to be exactly same as the one used by the corresponding EL client. --builder boolean Enable builder interface false --builder.urls array Urls hosting the builder API --builder.timeout number Timeout in miliseconds for builder API HTTP client --metrics boolean Enable the Prometheus metrics HTTP server false --metrics.port number Listen TCP port for the Prometheus metrics HTTP server 8008 --metrics.address string Listen address for the Prometheus metrics HTTP server undefined --discv5 boolean Enable discv5 true --listenAddress string The address to listen for p2p UDP and TCP connections 0.0.0.0 --port number The TCP/UDP port to listen on. The UDP port can be modified by the --discovery-port flag. 9000 --discoveryPort number The UDP port that discovery will listen on. Defaults to port port --bootnodes array Bootnodes for discv5 discovery [] --targetPeers number The target connected peers. Above this number peers will be disconnected 50 --subscribeAllSubnets boolean Subscribe to all subnets regardless of validator count false --terminal-total-difficulty-override string Terminal PoW block TTD override --terminal-block-hash-override string Terminal PoW block hash override --terminal-block-hash-epoch-override string Terminal PoW block hash override activation epoch --enr.ip string Override ENR IP entry --enr.tcp number Override ENR TCP entry --enr.udp number Override ENR UDP entry --enr.ip6 string Override ENR IPv6 entry --enr.tcp6 number Override ENR (IPv6-specific) TCP entry --enr.udp6 number Override ENR (IPv6-specific) UDP entry","title":"beacon"},{"location":"reference/cli/#validator","text":"Run one or multiple validator clients Examples Run one validator client with all the keystores available in the directory .goerli/keystores validator --network goerli Options The options below apply to all subcommands. Option Type Description Default --logLevel string Logging verbosity level for emittings logs to terminal info --logFile string Path to output all logs to a persistent log file, use 'none' to disable --logFileLevel string Logging verbosity level for emittings logs to file debug --logFileDailyRotate number Daily rotate log files, set to an integer to limit the file count, set to 0(zero) to disable rotation 5 --keymanager boolean Enable keymanager API server --keymanager.authEnabled boolean Enable token bearer authentication for keymanager API server true --keymanager.port number Set port for keymanager API 5062 --keymanager.address string Set host for keymanager API 127.0.0.1 --keymanager.cors string Configures the Access-Control-Allow-Origin CORS header for keymanager API * --beaconNodes array Addresses to connect to BeaconNode http://127.0.0.1:9596 --force boolean Open validators even if there's a lockfile. Use with caution --graffiti string Specify your custom graffiti to be included in blocks (plain UTF8 text, 32 characters max) --proposerSettingsFile string A yaml file to specify detailed default and per validator pubkey customized proposer configs. PS: This feature and its format is in alpha and subject to change --suggestedFeeRecipient string Specify fee recipient default for collecting the EL block fees and rewards (a hex string representing 20 bytes address: ^0x[a-fA-F0-9]{40}$). It would be possible (WIP) to override this per validator key using config or keymanager API. Only used post merge. 0x0000000000000000000000000000000000000000 --strictFeeRecipientCheck boolean Enable strict checking of the validator's feeRecipient with the one returned by engine --defaultGasLimit number Suggested gasLimit to the engine/builder for building execution payloads. Only used post merge. 30000000 --builder boolean Enable execution payload production via a builder for better rewards --importKeystores array Path(s) to a directory or single filepath to validator keystores, i.e. Launchpad validators ./keystores/*.json --importKeystoresPassword string Path to a file with password to decrypt all keystores from importKeystores option ./password.txt --doppelgangerProtectionEnabled boolean Enables Doppelganger protection --externalSigner.url string URL to connect to an external signing server --externalSigner.pubkeys array List of validator public keys used by an external signer. May also provide a single string a comma separated public keys --externalSigner.fetch boolean Fetch then list of pubkeys to validate from an external signer --metrics boolean Enable the Prometheus metrics HTTP server false --metrics.port number Listen TCP port for the Prometheus metrics HTTP server 5064 --metrics.address string Listen address for the Prometheus metrics HTTP server 127.0.0.1","title":"validator"},{"location":"reference/cli/#validator-slashing-protection","text":"Import or export slashing protection data to or from another client. Options The options below apply to all subcommands. Option Type Description Default --beaconNodes array Addresses to connect to BeaconNode http://127.0.0.1:9596 --force boolean If genesisValidatorsRoot can't be fetched from the Beacon node, use a zero hash","title":"validator slashing-protection"},{"location":"reference/cli/#validator-slashing-protection-import","text":"Import an interchange file. Examples Import an interchange file to the slashing protection DB validator slashing-protection import --network goerli --file interchange.json Options Option Type Description Default --file string The slashing protection interchange file to import (.json).","title":"validator slashing-protection  import"},{"location":"reference/cli/#validator-slashing-protection-export","text":"Export an interchange file. Examples Export an interchange JSON file for all validators in the slashing protection DB validator slashing-protection export --network goerli --file interchange.json Options Option Type Description Default --file string The slashing protection interchange file to export to (.json).","title":"validator slashing-protection  export"},{"location":"reference/cli/#validator-import","text":"Imports one or more EIP-2335 keystores into a Lodestar validator client directory, requesting passwords interactively. The directory flag provides a convenient method for importing a directory of keys generated by the eth2-deposit-cli Ethereum Foundation utility. Examples Import validator keystores generated with the Ethereum Foundation Staking Launchpad validator import --network goerli --keystores $HOME/eth2.0-deposit-cli/validator_keys Options Option Type Description Default --logLevel string Logging verbosity level for emittings logs to terminal info --logFile string Path to output all logs to a persistent log file, use 'none' to disable --logFileLevel string Logging verbosity level for emittings logs to file debug --logFileDailyRotate number Daily rotate log files, set to an integer to limit the file count, set to 0(zero) to disable rotation 5 --keymanager boolean Enable keymanager API server --keymanager.authEnabled boolean Enable token bearer authentication for keymanager API server true --keymanager.port number Set port for keymanager API 5062 --keymanager.address string Set host for keymanager API 127.0.0.1 --keymanager.cors string Configures the Access-Control-Allow-Origin CORS header for keymanager API * --beaconNodes array Addresses to connect to BeaconNode http://127.0.0.1:9596 --force boolean Open validators even if there's a lockfile. Use with caution --graffiti string Specify your custom graffiti to be included in blocks (plain UTF8 text, 32 characters max) --proposerSettingsFile string A yaml file to specify detailed default and per validator pubkey customized proposer configs. PS: This feature and its format is in alpha and subject to change --suggestedFeeRecipient string Specify fee recipient default for collecting the EL block fees and rewards (a hex string representing 20 bytes address: ^0x[a-fA-F0-9]{40}$). It would be possible (WIP) to override this per validator key using config or keymanager API. Only used post merge. 0x0000000000000000000000000000000000000000 --strictFeeRecipientCheck boolean Enable strict checking of the validator's feeRecipient with the one returned by engine --defaultGasLimit number Suggested gasLimit to the engine/builder for building execution payloads. Only used post merge. 30000000 --builder boolean Enable execution payload production via a builder for better rewards --importKeystores array Path(s) to a directory or single filepath to validator keystores, i.e. Launchpad validators ./keystores/*.json --importKeystoresPassword string Path to a file with password to decrypt all keystores from importKeystores option ./password.txt --doppelgangerProtectionEnabled boolean Enables Doppelganger protection --externalSigner.url string URL to connect to an external signing server --externalSigner.pubkeys array List of validator public keys used by an external signer. May also provide a single string a comma separated public keys --externalSigner.fetch boolean Fetch then list of pubkeys to validate from an external signer --metrics boolean Enable the Prometheus metrics HTTP server false --metrics.port number Listen TCP port for the Prometheus metrics HTTP server 5064 --metrics.address string Listen address for the Prometheus metrics HTTP server 127.0.0.1","title":"validator import"},{"location":"reference/cli/#validator-list","text":"Lists the public keys of all validators Examples List all validator pubkeys previously imported account validator list","title":"validator list"},{"location":"reference/cli/#validator-voluntary-exit","text":"Performs a voluntary exit for a given validator (as identified via publicKey . If no publicKey is provided, a prompt will ask the user which validator they would like to choose for the voluntary exit. Examples Perform a voluntary exit for the validator who has a public key 0xF00 account validator voluntary-exit --publicKey 0xF00 Options Option Type Description Default --exitEpoch number The epoch upon which to submit the voluntary exit. If no value is provided, then we default to the currentEpoch. --pubkeys array Pubkeys to exit, must be available as local signers --yes boolean Skip confirmation prompt","title":"validator voluntary-exit"},{"location":"reference/cli/#lightclient","text":"Run lightclient Examples Run lightclient with goerli network lightclient --network goerli Options Option Type Description Default --logLevel string Logging verbosity level for emittings logs to terminal info --logFile string Path to output all logs to a persistent log file, use 'none' to disable --logFileLevel string Logging verbosity level for emittings logs to file debug --logFileDailyRotate number Daily rotate log files, set to an integer to limit the file count, set to 0(zero) to disable rotation 5 --beaconApiUrl string Url to a beacon node that support lightclient API --checkpointRoot string Checkpoint root hex string to sync the lightclient from, start with 0x","title":"lightclient"},{"location":"reference/cli/#dev","text":"Quickly bootstrap a beacon node and multiple validators. Use for development and testing Examples Start a single beacon node with 8 interop validators dev --genesisValidators 8 --reset Options Cmd dev has all the options from the beacon cmd . Option Type Description Default --keymanager boolean Enable keymanager API server --keymanager.authEnabled boolean Enable token bearer authentication for keymanager API server true --keymanager.port number Set port for keymanager API 5062 --keymanager.address string Set host for keymanager API 127.0.0.1 --keymanager.cors string Configures the Access-Control-Allow-Origin CORS header for keymanager API * --beaconNodes array Addresses to connect to BeaconNode http://127.0.0.1:9596 --force boolean Open validators even if there's a lockfile. Use with caution --graffiti string Specify your custom graffiti to be included in blocks (plain UTF8 text, 32 characters max) --proposerSettingsFile string A yaml file to specify detailed default and per validator pubkey customized proposer configs. PS: This feature and its format is in alpha and subject to change --strictFeeRecipientCheck boolean Enable strict checking of the validator's feeRecipient with the one returned by engine --defaultGasLimit number Suggested gasLimit to the engine/builder for building execution payloads. Only used post merge. 30000000 --importKeystores array Path(s) to a directory or single filepath to validator keystores, i.e. Launchpad validators ./keystores/*.json --importKeystoresPassword string Path to a file with password to decrypt all keystores from importKeystores option ./password.txt --doppelgangerProtectionEnabled boolean Enables Doppelganger protection --externalSigner.url string URL to connect to an external signing server --externalSigner.pubkeys array List of validator public keys used by an external signer. May also provide a single string a comma separated public keys --externalSigner.fetch boolean Fetch then list of pubkeys to validate from an external signer --network string Name of the Ethereum Consensus chain network to join mainnet --genesisEth1Hash string If present it will create genesis with this eth1 hash. --genesisValidators number If present it will create genesis with interop validators and start chain. 8 --startValidators string Start interop validators in inclusive range with notation '0..7' --genesisTime number genesis_time to initialize interop genesis state now --reset boolean To delete chain and validator directories","title":"dev"},{"location":"usage/beacon-management/","text":"Beacon management \u00b6 The following instructions are required to setup and run a Lodestar beacon node. Beacon management Connect to mainnet or a public testnet Configure the Lodestar JWT authentication token Generate a secret key Configure Lodestar to locate the JWT secret Ensure JWT is configured with your execution node Initialize a beacon node (optional) Run a beacon node Checkpoint Sync Connect to mainnet or a public testnet \u00b6 Running a Lodestar node on mainnet or a testnet only requires basic familiarity with the terminal. Make sure Lodestar is installed in your local environment, following the chosen install method. The following command should return a non error message. ./lodestar --help For a complete list of beacon node CLI commands and options, see the Command Line Reference To select a known testnet or mainnet, use the --network flag. mainnet is selected by default, and a list of available networks is listed with the --help flag. Setting the --network flag will conveniently configure the beacon node or validator client for the selected network. For power users, any configuration option should be able to be overridden. Configure the Lodestar JWT authentication token \u00b6 Post-Merge Ethereum will require secure authentication with the Engine API connection on your chosen Execution node. Info Post-Merge Ethereum requires a secure, authenticated connection to the Execution client on port 8551. We recommend setting this up now to ensure a proper configuration before the Merge. Generate a secret key \u00b6 You must generate a secret 32-byte (64 characters) hexadecimal string that will be used to authenticate with an execution node. You can use the following command in most terminals to generate a random secret: openssl rand -hex 32 . Or you can use an online generator . Save this secret key into a text file and note where you store this file. Configure Lodestar to locate the JWT secret \u00b6 When starting up a Lodestar beacon node in any configuration, ensure you add the --jwt-secret /path/to/file flag to point to the saved secret key file. Ensure JWT is configured with your execution node \u00b6 For Go Ethereum: Use the --authrpc.jwtsecret /data/jwtsecret flag to configure the secret. Use their documentation here . For Nethermind: Use the --JsonRpc.JwtSecretFile /data/jwtsecret flag to configure the secret. Use their documentation here . For Besu: Use the --engine-jwt-secret=<FILE> flag to configure the secret. Use their documentation here . For Erigon: Use the --authrpc.jwtsecret flag to configure the secret. Use their documentation here . Initialize a beacon node (optional) \u00b6 If you would like to initialize your beacon node with the basic files required to run on a testnet or mainnet before actually running the node (Especially useful for configuring a new testnet), you can run the following command: ./lodestar init --network $NETWORK_NAME By default, Lodestar stores all configuration and chain data at the path $XDG_DATA_HOME/lodestar/$NETWORK_NAME . Run a beacon node \u00b6 To start a Lodestar beacon run the command: ./lodestar beacon --network $NETWORK_NAME This will assume an eth1 client is available at the default location of localhost:8545 . In case eth1 clients are available at different locations, use --eth1.providerUrls to specify these locations in the command: ./lodestar beacon --network $NETWORK_NAME --eth1.providerUrls eth1.url1 eth1.url2 It is also possible to start a Lodestar beacon that does not follow the eth1 chain. For this, use the eth1 option in the command: ./lodestar beacon --eth1 false --network $NETWORK_NAME Immediately you should see confirmation that the node has started Jul-09 17 :32:34.895 [] info: Lodestar version = 0 .26.0 master 8058d367, network = prater Jul-09 17 :32:34.920 [ DB ] info: Connected to LevelDB database name = /home/user/.local/share/lodestar/prater/chain-db Jul-09 17 :32:46.419 [] info: Initializing beacon state slot = 0 , epoch = 0 , stateRoot = 0x895390e92edc03df7096e9f51e51896e8dbe6e7e838180dadbfd869fdd77a659 Jul-09 17 :33:13.502 [ NETWORK ] info: PeerId 16Uiu2HAmHXf37Pa4whSF1rdwWbkqDuiwd3U7wqTgadQVza48MTn4, Multiaddrs /ip4/127.0.0.1/tcp/9000 Jul-09 17 :33:13.503 [] warn: Low peer count peers = 0 Jul-09 17 :33:13.504 [] info: Searching for peers - peers: 0 - finalized: 0 0x0000\u20260000 - head: 0 0x8c0e\u2026ee87 - clockSlot: 780166 Jul-09 17 :33:18.001 [] info: Searching for peers - peers: 0 - finalized: 0 0x0000\u20260000 - head: 0 0x8c0e\u2026ee87 - clockSlot: 780166 Jul-09 17 :33:30.000 [] info: Searching for peers - peers: 0 - finalized: 0 0x0000\u20260000 - head: 0 0x8c0e\u2026ee87 - clockSlot: 780167 Jul-09 17 :33:42.002 [] info: Searching for peers - peers: 0 - finalized: 0 0x0000\u20260000 - head: 0 0x8c0e\u2026ee87 - clockSlot: 780168 Jul-09 17 :33:54.000 [] info: Searching for peers - peers: 0 - finalized: 0 0x0000\u20260000 - head: 0 0x8c0e\u2026ee87 - clockSlot: 780169 Jul-09 17 :34:06.000 [] info: Searching for peers - peers: 0 - finalized: 0 0x0000\u20260000 - head: 0 0x8c0e\u2026ee87 - clockSlot: 780170 Jul-09 17 :34:18.386 [] info: Syncing - 30 days left - 0 .297 slots/s - finalized: 0 0x0000\u20260000 - head: 30 0x0bcf\u20260506 - clockSlot: 780171 - peers: 1 Jul-09 17 :34:30.448 [] info: Syncing - 8 .1 days left - 1 .12 slots/s - finalized: 2 0x8e30\u20263ce0 - head: 128 0xd4f1\u2026d32b - clockSlot: 780172 - peers: 1 Jul-09 17 :34:42.205 [] info: Syncing - 4 .2 days left - 2 .15 slots/s - finalized: 5 0x2811\u20265120 - head: 255 0x6c99\u2026033b - clockSlot: 780173 - peers: 1 Jul-09 17 :34:54.278 [] info: Syncing - 3 days left - 3 .00 slots/s - finalized: 8 0x65e2\u202652a9 - head: 351 0x0f5a\u20261cd3 - clockSlot: 780174 - peers: 1 Info If your node is stuck with Searching for peers review your network configuration to make sure your ports are open. A young testnet should take a few hours to sync. If you see multiple or consistent errors in the logs, please open a Github issue or reach out to us in Discord . Just by reporting anomalies you are helping accelerate the progress of Ethereum Consensus, thanks for contributing! Warning It is dangerous to expose your Beacon APIs publicly as there is no default authentication mechanism provided. Ensure your beacon node host is not exposing ports 8545 or 9596 outside of your internal network. Checkpoint Sync \u00b6 If you are starting your node from a blank db/genesis (or from last saved state in db) in a network which is now far ahead, your node is susceptible to \"long range attacks\" via something called weak subjectivity. Read Vitalik's illuminating post on the same . If you have a synced beacon node available (e.g. your friend's node or an infrastructure provider) and a trusted checkpoint you can rely on, you can start off your beacon node in under a minute! And at the same time kicking the \"long range attack\" in its butt! Just supply these extra args to your beacon node command: --checkpointSyncUrl <synced node url> [ --wssCheckpoint <trusted checkpoint in root:epoch format> ] In case you really trust checkpointSyncUrl then you may skip providing wssCheckpoint , which will then result into your beacon node syncing and starting off the recently finalized state from the trusted url. Warning Please use this option very carefully (and at your own risk), a malicious server URL can put you on the wrong chain with a danger of you losing your funds by social engineering. If possible, validate your wssCheckpoint from multiple places (e.g. different client distributions) or from other trusted sources. This will highly reduce the risk of starting off on a malicious chain.","title":"Beacon management"},{"location":"usage/beacon-management/#beacon-management","text":"The following instructions are required to setup and run a Lodestar beacon node. Beacon management Connect to mainnet or a public testnet Configure the Lodestar JWT authentication token Generate a secret key Configure Lodestar to locate the JWT secret Ensure JWT is configured with your execution node Initialize a beacon node (optional) Run a beacon node Checkpoint Sync","title":"Beacon management"},{"location":"usage/beacon-management/#connect-to-mainnet-or-a-public-testnet","text":"Running a Lodestar node on mainnet or a testnet only requires basic familiarity with the terminal. Make sure Lodestar is installed in your local environment, following the chosen install method. The following command should return a non error message. ./lodestar --help For a complete list of beacon node CLI commands and options, see the Command Line Reference To select a known testnet or mainnet, use the --network flag. mainnet is selected by default, and a list of available networks is listed with the --help flag. Setting the --network flag will conveniently configure the beacon node or validator client for the selected network. For power users, any configuration option should be able to be overridden.","title":"Connect to mainnet or a public testnet"},{"location":"usage/beacon-management/#configure-the-lodestar-jwt-authentication-token","text":"Post-Merge Ethereum will require secure authentication with the Engine API connection on your chosen Execution node. Info Post-Merge Ethereum requires a secure, authenticated connection to the Execution client on port 8551. We recommend setting this up now to ensure a proper configuration before the Merge.","title":"Configure the Lodestar JWT authentication token"},{"location":"usage/beacon-management/#generate-a-secret-key","text":"You must generate a secret 32-byte (64 characters) hexadecimal string that will be used to authenticate with an execution node. You can use the following command in most terminals to generate a random secret: openssl rand -hex 32 . Or you can use an online generator . Save this secret key into a text file and note where you store this file.","title":"Generate a secret key"},{"location":"usage/beacon-management/#configure-lodestar-to-locate-the-jwt-secret","text":"When starting up a Lodestar beacon node in any configuration, ensure you add the --jwt-secret /path/to/file flag to point to the saved secret key file.","title":"Configure Lodestar to locate the JWT secret"},{"location":"usage/beacon-management/#ensure-jwt-is-configured-with-your-execution-node","text":"For Go Ethereum: Use the --authrpc.jwtsecret /data/jwtsecret flag to configure the secret. Use their documentation here . For Nethermind: Use the --JsonRpc.JwtSecretFile /data/jwtsecret flag to configure the secret. Use their documentation here . For Besu: Use the --engine-jwt-secret=<FILE> flag to configure the secret. Use their documentation here . For Erigon: Use the --authrpc.jwtsecret flag to configure the secret. Use their documentation here .","title":"Ensure JWT is configured with your execution node"},{"location":"usage/beacon-management/#initialize-a-beacon-node-optional","text":"If you would like to initialize your beacon node with the basic files required to run on a testnet or mainnet before actually running the node (Especially useful for configuring a new testnet), you can run the following command: ./lodestar init --network $NETWORK_NAME By default, Lodestar stores all configuration and chain data at the path $XDG_DATA_HOME/lodestar/$NETWORK_NAME .","title":"Initialize a beacon node (optional)"},{"location":"usage/beacon-management/#run-a-beacon-node","text":"To start a Lodestar beacon run the command: ./lodestar beacon --network $NETWORK_NAME This will assume an eth1 client is available at the default location of localhost:8545 . In case eth1 clients are available at different locations, use --eth1.providerUrls to specify these locations in the command: ./lodestar beacon --network $NETWORK_NAME --eth1.providerUrls eth1.url1 eth1.url2 It is also possible to start a Lodestar beacon that does not follow the eth1 chain. For this, use the eth1 option in the command: ./lodestar beacon --eth1 false --network $NETWORK_NAME Immediately you should see confirmation that the node has started Jul-09 17 :32:34.895 [] info: Lodestar version = 0 .26.0 master 8058d367, network = prater Jul-09 17 :32:34.920 [ DB ] info: Connected to LevelDB database name = /home/user/.local/share/lodestar/prater/chain-db Jul-09 17 :32:46.419 [] info: Initializing beacon state slot = 0 , epoch = 0 , stateRoot = 0x895390e92edc03df7096e9f51e51896e8dbe6e7e838180dadbfd869fdd77a659 Jul-09 17 :33:13.502 [ NETWORK ] info: PeerId 16Uiu2HAmHXf37Pa4whSF1rdwWbkqDuiwd3U7wqTgadQVza48MTn4, Multiaddrs /ip4/127.0.0.1/tcp/9000 Jul-09 17 :33:13.503 [] warn: Low peer count peers = 0 Jul-09 17 :33:13.504 [] info: Searching for peers - peers: 0 - finalized: 0 0x0000\u20260000 - head: 0 0x8c0e\u2026ee87 - clockSlot: 780166 Jul-09 17 :33:18.001 [] info: Searching for peers - peers: 0 - finalized: 0 0x0000\u20260000 - head: 0 0x8c0e\u2026ee87 - clockSlot: 780166 Jul-09 17 :33:30.000 [] info: Searching for peers - peers: 0 - finalized: 0 0x0000\u20260000 - head: 0 0x8c0e\u2026ee87 - clockSlot: 780167 Jul-09 17 :33:42.002 [] info: Searching for peers - peers: 0 - finalized: 0 0x0000\u20260000 - head: 0 0x8c0e\u2026ee87 - clockSlot: 780168 Jul-09 17 :33:54.000 [] info: Searching for peers - peers: 0 - finalized: 0 0x0000\u20260000 - head: 0 0x8c0e\u2026ee87 - clockSlot: 780169 Jul-09 17 :34:06.000 [] info: Searching for peers - peers: 0 - finalized: 0 0x0000\u20260000 - head: 0 0x8c0e\u2026ee87 - clockSlot: 780170 Jul-09 17 :34:18.386 [] info: Syncing - 30 days left - 0 .297 slots/s - finalized: 0 0x0000\u20260000 - head: 30 0x0bcf\u20260506 - clockSlot: 780171 - peers: 1 Jul-09 17 :34:30.448 [] info: Syncing - 8 .1 days left - 1 .12 slots/s - finalized: 2 0x8e30\u20263ce0 - head: 128 0xd4f1\u2026d32b - clockSlot: 780172 - peers: 1 Jul-09 17 :34:42.205 [] info: Syncing - 4 .2 days left - 2 .15 slots/s - finalized: 5 0x2811\u20265120 - head: 255 0x6c99\u2026033b - clockSlot: 780173 - peers: 1 Jul-09 17 :34:54.278 [] info: Syncing - 3 days left - 3 .00 slots/s - finalized: 8 0x65e2\u202652a9 - head: 351 0x0f5a\u20261cd3 - clockSlot: 780174 - peers: 1 Info If your node is stuck with Searching for peers review your network configuration to make sure your ports are open. A young testnet should take a few hours to sync. If you see multiple or consistent errors in the logs, please open a Github issue or reach out to us in Discord . Just by reporting anomalies you are helping accelerate the progress of Ethereum Consensus, thanks for contributing! Warning It is dangerous to expose your Beacon APIs publicly as there is no default authentication mechanism provided. Ensure your beacon node host is not exposing ports 8545 or 9596 outside of your internal network.","title":"Run a beacon node"},{"location":"usage/beacon-management/#checkpoint-sync","text":"If you are starting your node from a blank db/genesis (or from last saved state in db) in a network which is now far ahead, your node is susceptible to \"long range attacks\" via something called weak subjectivity. Read Vitalik's illuminating post on the same . If you have a synced beacon node available (e.g. your friend's node or an infrastructure provider) and a trusted checkpoint you can rely on, you can start off your beacon node in under a minute! And at the same time kicking the \"long range attack\" in its butt! Just supply these extra args to your beacon node command: --checkpointSyncUrl <synced node url> [ --wssCheckpoint <trusted checkpoint in root:epoch format> ] In case you really trust checkpointSyncUrl then you may skip providing wssCheckpoint , which will then result into your beacon node syncing and starting off the recently finalized state from the trusted url. Warning Please use this option very carefully (and at your own risk), a malicious server URL can put you on the wrong chain with a danger of you losing your funds by social engineering. If possible, validate your wssCheckpoint from multiple places (e.g. different client distributions) or from other trusted sources. This will highly reduce the risk of starting off on a malicious chain.","title":"Checkpoint Sync"},{"location":"usage/local/","text":"Local testnet \u00b6 To quickly test and run Lodestar we recommend starting a local testnet. We recommend a simple configuration of two beacon nodes with multiple validators Terminal 1 Run a beacon node, with 8 validators with the following command. ./lodestar dev --genesisValidators 8 --genesisTime 1578787200 --startValidators 0 :8 --enr.ip 127 .0.0.1 --dataDir </path/to/node1> --reset --genesisValidators and --genesisTime define the genesis state of the beacon chain. --dataDir defines a path where lodestar should store the beacon state, --enr.ip sets the enr ip entry for the node while the --reset flag ensures the state is cleared on each restart - which is useful when testing locally. Once the node has started, make a request to curl http://localhost:9596/eth/v1/node/identity and copy the enr value. This would be used to connect from the second node. enr stands for ethereum node records, which is a format for conveying p2p connectivity information for ethereum nodes. For more info see eip-778 Terminal 2 Start the second node without starting any validators and connect to the first node by supplying the copied enr value: ./lodestar dev --genesisValidators 8 --genesisTime 1578787200 \\ --dataDir /path/to/node2 \\ --port 9001 \\ --rest.port 9597 \\ --network.connectToDiscv5Bootnodes true \\ --network.discv5.bootEnrs <enr value> --reset By default, lodestar starts as many validators as the number supplied by --genesisValidators . In other to not start any validator, this is overridden by the --startValidators option. Passing a value of 0:0 means no validators should be started. Also, take note that the values of --genesisValidators and --genesisTime must be the same as the ones passed to the first node in order for the two nodes to have the same beacon chain. Also --port and --rest.port are supplied since the default values will already be in use by the first node. The --network.connectToDiscv5Bootnodes flags needs to be set to true as this is needed to allow connection to boot enrs on local devnet. The exact enr of node to connect to is then supplied via the --network.discv5.bootEnrs flag. Once the second node starts, you should see an output similar to the following in either of the terminals: Eph 167991/6 6.007 [] info: Searching peers - peers: 1 - slot: 5375718 (skipped 5375718) - head: 0 0xcc67\u20263345 - finalized: 0x0000\u20260000:0 For further confirmation that both nodes are connected as peers, make a request to the /eth/v1/node/peers endpoint. For example, making the request on the first node via the following command: curl http://localhost:9596/eth/v1/node/peers | jq will give a result similar to the following: { \"data\": [ { \"peer_id\": \"...\", \"enr\": \"\", \"last_seen_p2p_address\": \"....\", \"direction\": \"inbound\", \"state\": \"connected\" } ], \"meta\": { \"count\": 1 } } Post-Merge local testnet \u00b6 To set up a local testnet with a Post-Merge configuration, you may need to add the following parameters (in addition to the parameters described above) to your lodestar dev command: --params.ALTAIR_FORK_EPOCH 0 --params.BELLATRIX_FORK_EPOCH 0 --terminal-total-difficulty-override 0","title":"Local testnet"},{"location":"usage/local/#local-testnet","text":"To quickly test and run Lodestar we recommend starting a local testnet. We recommend a simple configuration of two beacon nodes with multiple validators Terminal 1 Run a beacon node, with 8 validators with the following command. ./lodestar dev --genesisValidators 8 --genesisTime 1578787200 --startValidators 0 :8 --enr.ip 127 .0.0.1 --dataDir </path/to/node1> --reset --genesisValidators and --genesisTime define the genesis state of the beacon chain. --dataDir defines a path where lodestar should store the beacon state, --enr.ip sets the enr ip entry for the node while the --reset flag ensures the state is cleared on each restart - which is useful when testing locally. Once the node has started, make a request to curl http://localhost:9596/eth/v1/node/identity and copy the enr value. This would be used to connect from the second node. enr stands for ethereum node records, which is a format for conveying p2p connectivity information for ethereum nodes. For more info see eip-778 Terminal 2 Start the second node without starting any validators and connect to the first node by supplying the copied enr value: ./lodestar dev --genesisValidators 8 --genesisTime 1578787200 \\ --dataDir /path/to/node2 \\ --port 9001 \\ --rest.port 9597 \\ --network.connectToDiscv5Bootnodes true \\ --network.discv5.bootEnrs <enr value> --reset By default, lodestar starts as many validators as the number supplied by --genesisValidators . In other to not start any validator, this is overridden by the --startValidators option. Passing a value of 0:0 means no validators should be started. Also, take note that the values of --genesisValidators and --genesisTime must be the same as the ones passed to the first node in order for the two nodes to have the same beacon chain. Also --port and --rest.port are supplied since the default values will already be in use by the first node. The --network.connectToDiscv5Bootnodes flags needs to be set to true as this is needed to allow connection to boot enrs on local devnet. The exact enr of node to connect to is then supplied via the --network.discv5.bootEnrs flag. Once the second node starts, you should see an output similar to the following in either of the terminals: Eph 167991/6 6.007 [] info: Searching peers - peers: 1 - slot: 5375718 (skipped 5375718) - head: 0 0xcc67\u20263345 - finalized: 0x0000\u20260000:0 For further confirmation that both nodes are connected as peers, make a request to the /eth/v1/node/peers endpoint. For example, making the request on the first node via the following command: curl http://localhost:9596/eth/v1/node/peers | jq will give a result similar to the following: { \"data\": [ { \"peer_id\": \"...\", \"enr\": \"\", \"last_seen_p2p_address\": \"....\", \"direction\": \"inbound\", \"state\": \"connected\" } ], \"meta\": { \"count\": 1 } }","title":"Local testnet"},{"location":"usage/local/#post-merge-local-testnet","text":"To set up a local testnet with a Post-Merge configuration, you may need to add the following parameters (in addition to the parameters described above) to your lodestar dev command: --params.ALTAIR_FORK_EPOCH 0 --params.BELLATRIX_FORK_EPOCH 0 --terminal-total-difficulty-override 0","title":"Post-Merge local testnet"},{"location":"usage/mev-integration/","text":"MEV & Merge \u00b6 MEV is a term refered to bundling the transactions in one particular order to extract (mostly) arbitrage opportunities on the DAPPs and DEXes. And the ones who gets to include these execution payloads (miners in pre-merge world, validators in post-merge) in the canonical chain get paid a per-block reward which essentially should be higher than the normal payload inclusion reward (including transactions tips). Currently these happen with miners running forked versions of their favorite execution client, integrating with these \"builders\" but in the post-merge world they get a more native and standard integration with the CL. This is what we in CL land refer to as Builder Api . Lodestar and Builder API \u00b6 Lodestar offers builder integrations through the spec-ed builder API . This sits in parallel with the execution engine so when enabled, lodestar validator run both flows in parallel when its time to propose for a validator key and currently (naively) picks the builder block in preference to execution if a builder block is fetched (else just proceeds with the execution block). Configure Lodestar setup for MEV \u00b6 All you have to do is: Provide lodestar BN with a Builder endpoint (which corresponds to the network you are running) via these additional flags: --builder --builder.urls <builder/relay/boost url> Run lodestar VC with these additional flags --builder --suggestedFeeRecipient <your ethereum address> There are some more builder flags available in lodestar cli (for both beacon and validator) which you may inspect and use. Even though its possible to directly hook lodestar with an external Builder/Relay, its recommended to interface it with the MEV world via local MEV-BOOST multiplexer which can integrate multiple builder/relays for you and provide some payload verification on top, as currently Lodestar assumes this to be a trusted endpoint.","title":"MEV Builder Integration"},{"location":"usage/mev-integration/#mev-merge","text":"MEV is a term refered to bundling the transactions in one particular order to extract (mostly) arbitrage opportunities on the DAPPs and DEXes. And the ones who gets to include these execution payloads (miners in pre-merge world, validators in post-merge) in the canonical chain get paid a per-block reward which essentially should be higher than the normal payload inclusion reward (including transactions tips). Currently these happen with miners running forked versions of their favorite execution client, integrating with these \"builders\" but in the post-merge world they get a more native and standard integration with the CL. This is what we in CL land refer to as Builder Api .","title":"MEV &amp; Merge"},{"location":"usage/mev-integration/#lodestar-and-builder-api","text":"Lodestar offers builder integrations through the spec-ed builder API . This sits in parallel with the execution engine so when enabled, lodestar validator run both flows in parallel when its time to propose for a validator key and currently (naively) picks the builder block in preference to execution if a builder block is fetched (else just proceeds with the execution block).","title":"Lodestar and Builder API"},{"location":"usage/mev-integration/#configure-lodestar-setup-for-mev","text":"All you have to do is: Provide lodestar BN with a Builder endpoint (which corresponds to the network you are running) via these additional flags: --builder --builder.urls <builder/relay/boost url> Run lodestar VC with these additional flags --builder --suggestedFeeRecipient <your ethereum address> There are some more builder flags available in lodestar cli (for both beacon and validator) which you may inspect and use. Even though its possible to directly hook lodestar with an external Builder/Relay, its recommended to interface it with the MEV world via local MEV-BOOST multiplexer which can integrate multiple builder/relays for you and provide some payload verification on top, as currently Lodestar assumes this to be a trusted endpoint.","title":"Configure Lodestar setup for MEV"},{"location":"usage/prometheus-grafana/","text":"Prometheus and Grafana \u00b6 Prometheus is an open-source monitoring system with efficient time series database and a modern alerting approach. Together with Grafana it's the recommended way to make sure that your node and validator(s) are performing correctly. Prometheus \u00b6 To start, download Prometheus from https://prometheus.io/download/. Unzip the downloaded .zip file and run Prometheus from its installed location with the lodestar prometheus.yml passed in as the config file ./prometheus --config.file=$dataDir/prometheus.yml Info 8008 is also the default port specified in the prometheus.yml in the lodestar repo Then run the Lodestar beacon node with lodestar --metrics=true --metrics.serverPort=8008 Navigate to http://localhost:9090/ in your browser to verify that Prometheus is monitoring Lodestar Grafana \u00b6 Download and install Grafana from its official repository https://grafana.com/docs/grafana/latest/installation/debian/ Add Prometheus as a data source to Grafana https://prometheus.io/docs/visualization/grafana/#installing An example of relevant metrics of interest to monitor are: nodejs_heap_space_size_used_bytes nodejs_eventloop_lag_seconds beaconchain_peers beaconchain_current_slot beaconchain_current_finalized_epoch","title":"Prometheus & Grafana Setup"},{"location":"usage/prometheus-grafana/#prometheus-and-grafana","text":"Prometheus is an open-source monitoring system with efficient time series database and a modern alerting approach. Together with Grafana it's the recommended way to make sure that your node and validator(s) are performing correctly.","title":"Prometheus and Grafana"},{"location":"usage/prometheus-grafana/#prometheus","text":"To start, download Prometheus from https://prometheus.io/download/. Unzip the downloaded .zip file and run Prometheus from its installed location with the lodestar prometheus.yml passed in as the config file ./prometheus --config.file=$dataDir/prometheus.yml Info 8008 is also the default port specified in the prometheus.yml in the lodestar repo Then run the Lodestar beacon node with lodestar --metrics=true --metrics.serverPort=8008 Navigate to http://localhost:9090/ in your browser to verify that Prometheus is monitoring Lodestar","title":"Prometheus"},{"location":"usage/prometheus-grafana/#grafana","text":"Download and install Grafana from its official repository https://grafana.com/docs/grafana/latest/installation/debian/ Add Prometheus as a data source to Grafana https://prometheus.io/docs/visualization/grafana/#installing An example of relevant metrics of interest to monitor are: nodejs_heap_space_size_used_bytes nodejs_eventloop_lag_seconds beaconchain_peers beaconchain_current_slot beaconchain_current_finalized_epoch","title":"Grafana"},{"location":"usage/validator-management/","text":"Validator management \u00b6 The following instructions are required for stakers utilizing Lodestar. Validator management Wallet configuration Create a wallet Setup your validator Import a validator keystore from your wallet to Lodestar Configuring the fee recipient address Submit a validator deposit Run the validator Wallet configuration \u00b6 A wallet helps to manage many validators from a group of 12/24 words (also known as a \"mnemonic\" or \"recovery phrase\"). All validators and withdrawal keys can be re-generated from a backed-up mnemonic. The mnemonic is randomly generated during wallet creation and printed out to the terminal. It's important to make one or more backups of the mnemonic to ensure your ETH wallets are not lost in the case of data loss. Danger It is very important to keep your mnemonic private as it represents the ultimate control of your ETH wallets. Create a wallet \u00b6 Lodestar is deprecating its functionality to create wallets. To create a wallet, we recommend using the official staking-deposit-cli from the Ethereum Foundation for users comfortable with command line interfaces. Alternatively, for a graphical user interface, you can use the Stakehouse Wagyu Key Generator developed by members of the EthStaker community. Info These tools will generate files for staking validators as well as the important mnemonic. This mnemonic must be handled and stored securely. Setup your validator \u00b6 Validators are represented by a BLS keypair. Use your generated mnemonic from one of the tools above to generate the keystore files required for validator duties on Lodestar. Import a validator keystore from your wallet to Lodestar \u00b6 To import a validator keystore that was created via one of the methods described above, you must locate the validator keystore JSONs exported by those tools (ex. keystore-m_12381_3600_0_0_0-1654128694.json ). Inside the keystore JSON file, you should have an EIP-2335 conformant keystore file such as the example below: { \"crypto\": { \"kdf\": { \"function\": \"scrypt\", \"params\": { \"dklen\": 32, \"n\": 262144, \"r\": 8, \"p\": 1, \"salt\": \"30bb9ef21d9f1f946c3c7ab70e27f453180a49d473a2a3e79ca2bc715ac4e898\" }, \"message\": \"\" }, \"checksum\": { \"function\": \"sha256\", \"params\": {}, \"message\": \"ba3cf1c8ba5be4f90c36bcf44ee37a779eac8c54b72121e4755b6722e95164a7\" }, \"cipher\": { \"function\": \"aes-128-ctr\", \"params\": { \"iv\": \"90f76d9d4d1b089e89802eac2f80b6b7\" }, \"message\": \"8de2b0f55da54719822db6c083f0436ff94cd638be96c57b91339b438e9355f6\" } }, \"description\": \"\", \"pubkey\": \"b22690ca679edd5fb9c2545f358da1427b8310e8ccf9e7e4f01ddce9b1d711a0362d35225673cce8f33911a22ae1519e\", \"path\": \"m/12381/3600/0/0/0\", \"uuid\": \"de83e8dc-8f95-4ea0-b9ba-cfa608ff3483\", \"version\": 4 } These keystore files should be placed into your ./keystores folder in your Lodestar directory. Info The ./keystores folder is the default directory for storing validator keystores. You can specify a custom path using the --keystoresDir /path/to/folder flag. Reference our validator command line for more information. Create a password.txt file with the password you set for your keystores and save it into your ./secrets folder in your Lodestar directory. Configuring the fee recipient address \u00b6 Warning This feature is in review. Please use with caution and report any issues to the team through our Discord . Post-Merge Ethereum requires validators to set a Fee Recipient which allows you to receive priority fees when proposing blocks. If you do not set this address, your priority fees will be sent to the burn address . Configure your validator client's fee recipient address by using the --suggestedFeeRecipient flag. Ensure you specify an Ethereum address you control. An example of a fee recipient set with the address 0xB7576e9d314Df41EC5506494293Afb1bd5D3f65d would add the following flag to their configuration: --suggestedFeeRecipient 0xB7576e9d314Df41EC5506494293Afb1bd5D3f65d . You may choose to use the --strictFeeRecipientCheck flag to enable a strict check of the fee recipient address with the one returned by the beacon node for added reassurance. Submit a validator deposit \u00b6 DEPRECATED. Please use the official tools to perform your deposits - staking-deposit-cli : https://github.com/ethereum/staking-deposit-cli - Ethereum Foundation launchpad: https://launchpad.ethereum.org/en/ Run the validator \u00b6 To start a Lodestar validator run the command: ./lodestar validator --network $NETWORK_NAME You should see confirmation that modules have started. 2020 -08-07 14 :14:24 [] info: Decrypted 2 validator keystores 2020 -08-07 14 :14:24 [ VALIDATOR 0X8BAC4815 ] info: Setting up validator client... 2020 -08-07 14 :14:24 [ VALIDATOR 0X8BAC4815 ] info: Setting up RPC connection... 2020 -08-07 14 :14:24 [] info: Checking genesis time and beacon node connection 2020 -08-07 14 :14:24 [ VALIDATOR 0X8E44237B ] info: Setting up validator client... 2020 -08-07 14 :14:24 [ VALIDATOR 0X8E44237B ] info: Setting up RPC connection...","title":"Validator management"},{"location":"usage/validator-management/#validator-management","text":"The following instructions are required for stakers utilizing Lodestar. Validator management Wallet configuration Create a wallet Setup your validator Import a validator keystore from your wallet to Lodestar Configuring the fee recipient address Submit a validator deposit Run the validator","title":"Validator management"},{"location":"usage/validator-management/#wallet-configuration","text":"A wallet helps to manage many validators from a group of 12/24 words (also known as a \"mnemonic\" or \"recovery phrase\"). All validators and withdrawal keys can be re-generated from a backed-up mnemonic. The mnemonic is randomly generated during wallet creation and printed out to the terminal. It's important to make one or more backups of the mnemonic to ensure your ETH wallets are not lost in the case of data loss. Danger It is very important to keep your mnemonic private as it represents the ultimate control of your ETH wallets.","title":"Wallet configuration"},{"location":"usage/validator-management/#create-a-wallet","text":"Lodestar is deprecating its functionality to create wallets. To create a wallet, we recommend using the official staking-deposit-cli from the Ethereum Foundation for users comfortable with command line interfaces. Alternatively, for a graphical user interface, you can use the Stakehouse Wagyu Key Generator developed by members of the EthStaker community. Info These tools will generate files for staking validators as well as the important mnemonic. This mnemonic must be handled and stored securely.","title":"Create a wallet"},{"location":"usage/validator-management/#setup-your-validator","text":"Validators are represented by a BLS keypair. Use your generated mnemonic from one of the tools above to generate the keystore files required for validator duties on Lodestar.","title":"Setup your validator"},{"location":"usage/validator-management/#import-a-validator-keystore-from-your-wallet-to-lodestar","text":"To import a validator keystore that was created via one of the methods described above, you must locate the validator keystore JSONs exported by those tools (ex. keystore-m_12381_3600_0_0_0-1654128694.json ). Inside the keystore JSON file, you should have an EIP-2335 conformant keystore file such as the example below: { \"crypto\": { \"kdf\": { \"function\": \"scrypt\", \"params\": { \"dklen\": 32, \"n\": 262144, \"r\": 8, \"p\": 1, \"salt\": \"30bb9ef21d9f1f946c3c7ab70e27f453180a49d473a2a3e79ca2bc715ac4e898\" }, \"message\": \"\" }, \"checksum\": { \"function\": \"sha256\", \"params\": {}, \"message\": \"ba3cf1c8ba5be4f90c36bcf44ee37a779eac8c54b72121e4755b6722e95164a7\" }, \"cipher\": { \"function\": \"aes-128-ctr\", \"params\": { \"iv\": \"90f76d9d4d1b089e89802eac2f80b6b7\" }, \"message\": \"8de2b0f55da54719822db6c083f0436ff94cd638be96c57b91339b438e9355f6\" } }, \"description\": \"\", \"pubkey\": \"b22690ca679edd5fb9c2545f358da1427b8310e8ccf9e7e4f01ddce9b1d711a0362d35225673cce8f33911a22ae1519e\", \"path\": \"m/12381/3600/0/0/0\", \"uuid\": \"de83e8dc-8f95-4ea0-b9ba-cfa608ff3483\", \"version\": 4 } These keystore files should be placed into your ./keystores folder in your Lodestar directory. Info The ./keystores folder is the default directory for storing validator keystores. You can specify a custom path using the --keystoresDir /path/to/folder flag. Reference our validator command line for more information. Create a password.txt file with the password you set for your keystores and save it into your ./secrets folder in your Lodestar directory.","title":"Import a validator keystore from your wallet to Lodestar"},{"location":"usage/validator-management/#configuring-the-fee-recipient-address","text":"Warning This feature is in review. Please use with caution and report any issues to the team through our Discord . Post-Merge Ethereum requires validators to set a Fee Recipient which allows you to receive priority fees when proposing blocks. If you do not set this address, your priority fees will be sent to the burn address . Configure your validator client's fee recipient address by using the --suggestedFeeRecipient flag. Ensure you specify an Ethereum address you control. An example of a fee recipient set with the address 0xB7576e9d314Df41EC5506494293Afb1bd5D3f65d would add the following flag to their configuration: --suggestedFeeRecipient 0xB7576e9d314Df41EC5506494293Afb1bd5D3f65d . You may choose to use the --strictFeeRecipientCheck flag to enable a strict check of the fee recipient address with the one returned by the beacon node for added reassurance.","title":"Configuring the fee recipient address"},{"location":"usage/validator-management/#submit-a-validator-deposit","text":"DEPRECATED. Please use the official tools to perform your deposits - staking-deposit-cli : https://github.com/ethereum/staking-deposit-cli - Ethereum Foundation launchpad: https://launchpad.ethereum.org/en/","title":"Submit a validator deposit"},{"location":"usage/validator-management/#run-the-validator","text":"To start a Lodestar validator run the command: ./lodestar validator --network $NETWORK_NAME You should see confirmation that modules have started. 2020 -08-07 14 :14:24 [] info: Decrypted 2 validator keystores 2020 -08-07 14 :14:24 [ VALIDATOR 0X8BAC4815 ] info: Setting up validator client... 2020 -08-07 14 :14:24 [ VALIDATOR 0X8BAC4815 ] info: Setting up RPC connection... 2020 -08-07 14 :14:24 [] info: Checking genesis time and beacon node connection 2020 -08-07 14 :14:24 [ VALIDATOR 0X8E44237B ] info: Setting up validator client... 2020 -08-07 14 :14:24 [ VALIDATOR 0X8E44237B ] info: Setting up RPC connection...","title":"Run the validator"}]}